<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.NET Framework on Hello, (forgotten) world ☂</title><link>https://aquarite.info/tags/.net-framework/</link><description>Recent content in .NET Framework on Hello, (forgotten) world ☂</description><generator>Hugo</generator><language>ja-jp</language><copyright>&amp;copy; 2021 Mei Akizuru. All rights reserved.</copyright><lastBuildDate>Wed, 07 May 2014 13:33:03 +0900</lastBuildDate><atom:link href="https://aquarite.info/tags/.net-framework/index.xml" rel="self" type="application/rss+xml"/><item><title>MonoのWebClientにおけるURI</title><link>https://aquarite.info/blog/2014/05/uri-parsing-in-webclient/</link><pubDate>Wed, 07 May 2014 13:33:03 +0900</pubDate><guid>https://aquarite.info/blog/2014/05/uri-parsing-in-webclient/</guid><description>&lt;h1 id="発端">発端&lt;/h1>
&lt;p>発端は&lt;a href="https://aquarite.info/blog/2014/05/07/tkbctf3-miocat/">前の記事&lt;/a>にあるように、tkbctf3の問題としてmiocatなるものを出してみたのはいいものの、意図とは異なる脆弱性を作り込んで250点問題が超絶ボーナス問題になりましたよ、というお話しです。&lt;/p>
&lt;h1 id="調査">調査&lt;/h1>
&lt;p>miocatはC#で書かれており、実際の運用ではMonoランタイムで動いていました。というわけでMonoのソースコードを読めば解決です。やったね。&lt;/p>
&lt;p>そういうわけでまずは&lt;code>WebClient&lt;/code>の実装を読んでみたのですが、怪しい箇所が一発で見つかりました。&lt;a href="https://github.com/mono/mono/blob/2d573ae1ceac1656f0293cca3736dcb10c28be38/mcs/class/System/System.Net/WebClient.cs#L798">WebClient.cs#798&lt;/a>、privateメソッドである&lt;code>CreateUri(string)&lt;/code>なるメソッドです。&lt;code>DownloadString(string)&lt;/code>は、その引数をこのメソッドに渡して&lt;code>DownloadData(Uri)&lt;/code>を呼び出します。&lt;/p>
&lt;p>&lt;code>try-catch&lt;/code>の中で渡されたアドレス（と、&lt;code>baseAddress&lt;/code>）を元に&lt;code>Uri&lt;/code>のインスタンスを作って&lt;code>CreateUri(Uri)&lt;/code>に渡していますが、ここで例外が発生すると&lt;code>return new Uri(Path.GetFullPath(address))&lt;/code>という恐怖のコードが走ります。&lt;/p></description></item></channel></rss>