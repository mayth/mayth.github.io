<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .NET | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/dot-net/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-05-08T07:38:09+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[結局Monoと.NETの挙動の違いはなんだったのか]]></title>
    <link href="http://tech.aquarite.info/blog/2014/05/08/download-string-in-mono-and-dotnet-framework/"/>
    <updated>2014-05-08T06:49:41+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/05/08/download-string-in-mono-and-dotnet-framework</id>
    <content type="html"><![CDATA[<p>続・アレな文字を<code>WebClient.DownloadString(String)</code>に渡すとローカルのファイルが読める</p>

<p>ここ2つの記事でMonoの<code>WebClient.DownloadString(string)</code>にアレな文字列渡すとローカルファイルを落としてきてしまうという挙動について調べてたわけですが、よくよくスタックトレースを見てみると、.NET Frameworkでも<code>GetUri</code>というメソッドを経由して<code>Path.GetFullPath</code>が呼ばれていたことがわかりました。</p>

<p>そんなわけで<code>Path.GetFullPath</code>の挙動を見てみると、<code>http://../../../../etc/passwd</code>といったような文字列を与えたときに.NETとMonoで次のような挙動の違いが見られました。</p>

<ul>
<li>.NET Frameworkは「URIフォーマットはサポートしていない」というメッセージと共にArgumentExceptionが投げられる</li>
<li>Monoはそのままフルパスに変換する</li>
</ul>


<p>.NET上で同じことをしても<code>DownloadString(string)</code>がここまで問題にしてきた挙動をしなかったのは、ここで例外を吐いて止まっていたから、というだけのことだったわけです。</p>

<h1>スキーム</h1>

<p>ところでスキームをhttpじゃなくて適当な何かに変えたらどうなるんだろうと思って試してみました。</p>

<p>与える文字列を<code>abc://../../../../etc/passwd</code>といったように、実在しないような適当なスキームに変えて同じプログラムを動かしたところ、.NETではUriとしてのパースに成功しました。httpスキームのときは最初の部分をhostnameとして認識していたので、恐らくスキームを見てフォーマットを認識してるんでしょう。</p>

<p>さて、.NETにおいてはパースの結果<code>abc://../etc/passwd</code>になりました。なぜか<code>../</code>の部分がひとつにまとめられていましたがこれは一体どういう挙動なんでしょう。それはともかく、この結果を踏まえた上で同じ文字列を<code>WebClient.DownloadString(string)</code>に渡すと、今度は「そんなURIプリフィックスは知らん」とNotSupportedExceptionを投げられました。<code>WebRequest.Create</code>の中から呼ばれているようなので、前述の<code>GetUri</code>などは成功しているようです（というか、new Uriが成功するんだからそら成功するだろう）。で、<a href="http://msdn.microsoft.com/ja-jp/library/bw00b1dc%28v=vs.110%29.aspx">System.Net.WebRequest.Create(String)</a>を見ると、やはり渡されたURIのスキームに対応するものがない、という例外でよさそうです。どんなURIが渡されてもこれが呼ばれるとするなら、<code>http(s)://</code>、<code>ftp://</code>、<code>file://</code>のいずれにも該当しないURIは常に弾かれることになります。</p>

<p>Monoの場合、まず<code>new Uri(String)</code>が<code>UriFormatException</code>で失敗します。ということは前の記事で述べた通り<code>Path.GetFullPath</code>が呼ばれることになり、やはりこの場合でもローカルのファイルが読めてしまいます。</p>

<h1>まとめ</h1>

<p>結局何がこの挙動の違いを生み出していたのかというと以下の2点だと考えられます。</p>

<ul>
<li>Monoの<code>new Uri(String)</code>が未知のスキームを持つURIに対して失敗する（.NETは成功する）</li>
<li>Monoの<code>Path.GetFullPath(String)</code>がURIであるような文字列に対して成功する（.NETは失敗する）</li>
</ul>


<p>とりあえずバグレポートも書いたのでこの件は一段落ということでいいんじゃないんでしょうか……（遠い目）</p>

<p>（バグレポート、type=&ldquo;text"なフィールドでEnter叩いちゃって途中送信されて慌てて削除する方法を探してみるも見当も付かず、結局コメントで「途中送信しちゃった許してくださいお願いします何でもしますから」って言いながらレポート書き直したのは内緒だぞっ）</p>

<p>あと、整理のために<code>DownloadString(String)</code>の処理の流れを書いておきます。</p>

<h2>.NET</h2>

<h3>既知のスキームを持つ不正なURI</h3>

<p>given: <code>http://../../etc/passwd</code></p>

<ol>
<li><code>GetUri</code>が呼ばれる</li>
<li>たぶん内部的に<code>new Uri(String)</code>して失敗する</li>
<li>たぶんその結果<code>Path.GetFullPath(String)</code>が呼ばれる</li>
<li><code>Path.GetFullPath(String)</code>がArgumentExceptionを投げる (&ldquo;URI formats are not supported.&rdquo;)</li>
</ol>


<h3>未知のスキームを持つ不正なURI</h3>

<p>given: <code>abc://../../etc/passwd</code></p>

<ol>
<li><code>GetUri</code>が呼ばれる</li>
<li>たぶん内部的に<code>new Uri(String)</code>して成功する</li>
<li>成功したのでその結果をそのまま返す</li>
<li><code>WebRequest.Create</code>が呼ばれる</li>
<li><code>WebRequest.Create</code>が未知のスキームに対応できずNotSupportedExceptionを投げる</li>
</ol>


<h2>Mono</h2>

<h3>既知のスキームを持つ不正なURI</h3>

<p>given: <code>http://../../etc/passwd</code></p>

<ol>
<li><code>CreateUri</code>が呼ばれる</li>
<li><code>new Uri(String)</code>して失敗する</li>
<li><code>Path.GetFullPath(String)</code>が呼ばれる</li>
<li><code>Path.GetFullPath(String)</code>が成功し、結果を返す (e.g. <code>/home/etc/passwd</code>)</li>
<li>その結果を<code>new Uri(String)</code>に渡す (結果<code>file:///home/etc/passwd</code>なUriが返る)</li>
<li>それを取得する (この場合は（たぶん）そのファイルがないので例外を吐く）</li>
</ol>


<h3>未知のスキームを持つ不正なURI</h3>

<p>given: <code>abc://../../etc/passwd</code></p>

<ol>
<li><code>CreateUri</code>が呼ばれる</li>
<li><code>new Uri(String)</code>して失敗する</li>
<li><code>Path.GetFullPath(String)</code>が呼ばれる</li>
<li><code>Path.GetFullPath(String)</code>が成功し、結果を返す (e.g. <code>/home/etc/passwd</code>)</li>
<li>その結果を<code>new Uri(String)</code>に渡す (結果<code>file:///home/etc/passwd</code>なUriが返る)</li>
<li>それを取得する (この場合は（たぶん）そのファイルがないので例外を吐く）</li>
</ol>


<p>※.NETとの対比で両方書いたが、Monoの場合いずれも処理の流れは全く同じ</p>
]]></content>
  </entry>
  
</feed>
