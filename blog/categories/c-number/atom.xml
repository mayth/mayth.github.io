<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-07-20T18:49:36+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MonoのWebClientにおけるURI]]></title>
    <link href="http://tech.aquarite.info/blog/2014/05/07/uri-parsing-in-webclient/"/>
    <updated>2014-05-07T13:33:03+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/05/07/uri-parsing-in-webclient</id>
    <content type="html"><![CDATA[<h1>発端</h1>

<p>発端は<a href="/blog/2014/05/07/tkbctf3-miocat/">前の記事</a>にあるように、tkbctf3の問題としてmiocatなるものを出してみたのはいいものの、意図とは異なる脆弱性を作り込んで250点問題が超絶ボーナス問題になりましたよ、というお話しです。</p>

<h1>調査</h1>

<p>miocatはC#で書かれており、実際の運用ではMonoランタイムで動いていました。というわけでMonoのソースコードを読めば解決です。やったね。</p>

<p>そういうわけでまずは<code>WebClient</code>の実装を読んでみたのですが、怪しい箇所が一発で見つかりました。<a href="https://github.com/mono/mono/blob/2d573ae1ceac1656f0293cca3736dcb10c28be38/mcs/class/System/System.Net/WebClient.cs#L798">WebClient.cs#798</a>、privateメソッドである<code>CreateUri(string)</code>なるメソッドです。<code>DownloadString(string)</code>は、その引数をこのメソッドに渡して<code>DownloadData(Uri)</code>を呼び出します。</p>

<p><code>try-catch</code>の中で渡されたアドレス（と、<code>baseAddress</code>）を元に<code>Uri</code>のインスタンスを作って<code>CreateUri(Uri)</code>に渡していますが、ここで例外が発生すると<code>return new Uri(Path.GetFullPath(address))</code>という恐怖のコードが走ります。</p>

<p>まず例外を発生させる方法ですが、これは簡単でURIとして不正なものを渡してあげればおしまいです。例えば<code>abc://;/etc/passwd</code>はhostname部がパース不能なので例外を吐きます。</p>

<p><code>System.IO.Path.GetFullPath(string)</code>というのは名前からお察しの通り、与えられたパスをカレントディレクトリからの相対パスと見なして絶対パスに変換します。ここで、例えばカレントディレクトリが<code>/home/kogasa</code>、引数が<code>http://etc/passwd</code>だとすると、結果は<code>/home/kogasa/http://etc/passwd</code>になります。要するに<code>http:</code>というディレクトリの下に<code>etc</code>ディレクトリがあって云々、という形になります。つまるところ連続する<code>/</code>はひとつにまとめられてしまうわけです。先ほどの例外を吐く例でいけば、<code>/home/kogasa/abc://;/etc/passwd</code>になります。</p>

<p>ところでWindowsだとパスに<code>:</code>が入ってると厄介なことになりそうというか、<a href="http://msdn.microsoft.com/ja-jp/library/system.io.path.getfullpath%28v=vs.110%29.aspx">MSDN的には</a><code>NotSupportedException</code>が投げられるべきところだと思うのですが、コレ大丈夫なんでしょうか。ぱっと見ただけだとそれらしいコード見当たらなかったんですが……。</p>

<p>※Windowsで<code>GetFullPath</code>に<code>http://etc/passwd</code>を与えてみたら、<code>ArgumentException</code>で「URLフォーマットには対応していません」みたいなことを言われました。で、<code>abc://;/etc/passwd</code>を与えると<code>NotSupportedException</code>で「指定されたパスのフォーマットはサポートされていません」と言われました。ちゃんとスキーム見てるんですね。</p>

<p>それはそれとして、そんな感じでフルパスを<code>Uri</code>のコンストラクタに与えると、<code>file:</code>スキームのURLになって返ってきます。こうなるとただのローカルに対するディレクトリ操作なので、例えば<code>abc://;/../etc/passwd</code>にするとフルパスは<code>/home/kogasa/abc:/etc/passwd</code>になりますし、もういっこ<code>../</code>を足せば<code>/home/kogasa/etc/passwd</code>——といった感じで<code>../</code>をつけていけば無事に<code>/etc/passwd</code>に辿り着けますね、やったね、ということでした。</p>

<p>Monoの実装自体がヤバいのか、それともWindows以外で動かした結果ああなったのかまでは知りませんが、ひとまずそんな感じになりました。Windowsで動かしてたらあの解法は通らなかったのかなぁとかぼんやり思いながらそもそももっとマシな実装しておけばよかったと反省しきり。</p>

<p>それにしても繰り返しになりますが結構このURLとしてのパース失敗時の回復の仕方がヤバい気がするんですが、これは意図的に.NET Frameworkと異なる実装にしているのか特に理由はないけどこうなってるのか、はてさて。</p>

<h1>まとめ</h1>

<p><strong>もっと恐ろしいMonoの片鱗を味わったぜ…</strong></p>
]]></content>
  </entry>
  
</feed>
