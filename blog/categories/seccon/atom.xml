<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: seccon | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/seccon/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2015-03-12T19:50:17+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 Online Qualification (December) write-up]]></title>
    <link href="http://tech.aquarite.info/blog/2014/12/07/seccon2014-online-winter/"/>
    <updated>2014-12-07T22:11:39+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/12/07/seccon2014-online-winter</id>
    <content type="html"><![CDATA[<h1>Welcome to SECCON (Start 100)</h1>

<blockquote><p>The answer is &ldquo;SECCON{20141206}&rdquo;.</p>

<p>答えは、「SECCON{20141206}」です。</p></blockquote>

<p>驚くべきことに問題ページに答えが書かれている。なんと楽な問題なのだろう。</p>

<p>Answer: <code>SECCON{20141206}</code></p>

<h1>jspuzzle (Web 100)</h1>

<blockquote><p>jspuzzle.zip</p>

<p>You need to fill in all blanks!</p></blockquote>

<p><code>jspuzzle.zip</code>を展開すると<code>q.html</code>と<code>sha1.js</code>がある。<code>sha1.js</code>はJavaScriptでSHA-1のハッシュ値を計算するライブラリの模様。本体は<code>q.html</code>。</p>

<p>HTMLファイルを開くと穴あきになったJavaScriptのコードと、空いている箇所に埋めるピースとなる語が表示されている。目標はピースをはめていって、<code>alert(1)</code>を実行するコードにすること。フラグの値は埋めたピースから計算されたSHA-1ハッシュ値。問題文には「全ての空欄を埋めよ」とあるので、ちゃんと全部埋める。当然ながら一度使ったピースは二度使えない。</p>

<p>コードは次の通り(<code>"???"</code>が空欄の箇所)。</p>

<pre><code>"use strict";

({"???" :function(){
    this[ "???" ] = (new Function( "???" + "???" + "???" ))();
    var pattern = "???";
    var r = new RegExp( pattern );
    this[ r[ "???" ]( pattern ) ][ "???" ]( 1 );
}})[ "???"[ "???" ]() ]();
</code></pre>

<p>ピースは次の通り。</p>

<ul>
<li>fromCharCode</li>
<li>indexOf</li>
<li>match</li>
<li>this</li>
<li>new</li>
<li>null</li>
<li>charAt</li>
<li>alert</li>
<li>constructor</li>
<li>/<em>^_^</em>/</li>
<li>return</li>
<li>pattern</li>
<li>toLowerCase</li>
<li>exec</li>
<li>eval</li>
<li>debugger</li>
<li>function</li>
<li>^[w]$</li>
</ul>


<p>外側から見ていく。連想配列を生成して、その連想配列のある要素を関数として呼び出すコードがある。値は<code>function () { ... }</code>で固定で、キーの方が抜けている。また要素を取り出すときに<code>"???"["???"]()</code>をキーにしている。書き換えれば<code>"???".someMethod()</code>なので、後者の方は<code>String</code>に対するメソッドだと推測出来る。また、最初の空欄とこのメソッド呼び出しの結果が一致しなければならないから、最初の空欄が<code>function</code>、最後の2つの空欄が<code>Function</code>と<code>toLowerCase</code>となる。</p>

<p>本題の内側の方。4行目は何かしらの関数を生成してそれを実行した結果をこの連想配列に代入している。ということは、<code>new Function("...")</code>の中身は何かを返さねばならないので、3つの空欄のうち最初は<code>return</code>である。また7行目を見ると最終的にここで返した何かに対してメソッド呼び出しを行っている。引数が<code>1</code>なので<code>alert</code>が来ることは明らかである。よってここは<code>window</code>を返したい。だが3つの空欄は単純な文字列連結なので空白がない。これでしばらく悩んだが、よく見ると<code>/*^_^*/</code>はコメントである。まさかと思って2番目にこれを入れて、3番目に<code>this</code>を入れたところ、見事に<code>window</code>が返ってきた。ちなみに<code>this</code>を入れたのは他に選択肢がなかったからで、JavaScriptの<code>this</code>の仕様はさっぱり理解してない、というか出来る気がしない。なんで左辺の<code>this</code>は連想配列自身なのに右辺の関数内の<code>this</code>は<code>window</code>（たぶん外側で関数呼び出しを実行してる時点での<code>this</code>）なんだ…。ここまで固まったついでに5行目の2番目の空欄が<code>alert</code>であることも確定。</p>

<p>さて、7行目の最初の空欄だが、<code>r</code>はRegExpのインスタンスなのでここに入れられるのは<code>exec</code>か<code>constructor</code>くらいしかない。<code>constructor</code>入れたところで<code>this[/pattern/][alert](1)</code>になって意味不明なので<code>exec</code>を入れる。そうすると、4行目に先ほどの関数を代入した先のキーと<code>r.exec(pattern)</code>の結果が一致しなければならない。だが先ほど使ったような<code>function</code>と<code>"Function".toLowerCase()</code>の手は使えない。ところで、このとき調べて初めて知ったのだが、<code>test["null"] = "hoge"; console.log(test[null])</code>は<code>hoge</code>を出力する。マジかよと思って実行して唖然とした。JavaScriptヤバすぎるのでゎ。……でなんでそんな話をしたかというとちょうどピースに<code>null</code>が入っていて、かつ<code>pattern = "^[w]$"</code>とすると<code>r.exec(pattern)</code>は<code>null</code>を返すのである。</p>

<p>——というわけで空欄に<code>null</code>、<code>^[w]$</code>を埋めて完了。<code>alert(1)</code>が実行されるのを確認してフラグを送信して終了。</p>

<p><code>this["null"] = ...</code>の部分は@yyuがいなければ無限に悩んで死亡していた。連想配列のキーの比較どうなってるんだよマジ。</p>

<p>Answer: <code>SECCON{3678cbe0171c8517abeab9d20786a7390ffb602d}</code></p>

<h1>Easy Cipher (Crypto 100)</h1>

<blockquote><p>87 101 108 1100011 0157 6d 0145 040 116 0157 100000 0164 104 1100101 32 0123 69 67 0103 1001111 1001110 040 062 060 49 064 100000 0157 110 6c 0151 1101110 101 040 0103 1010100 70 101110 0124 1101000 101 100000 1010011 1000101 67 0103 4f 4e 100000 105 1110011 040 116 1101000 0145 040 1100010 0151 103 103 0145 1110011 0164 100000 1101000 0141 99 6b 1100101 0162 32 0143 111 1101110 1110100 101 0163 0164 040 0151 0156 040 74 0141 1110000 1100001 0156 056 4f 0157 0160 115 44 040 0171 1101111 117 100000 1110111 0141 0156 1110100 32 0164 6f 32 6b 1101110 1101111 1110111 100000 0164 1101000 0145 040 0146 6c 97 1100111 2c 100000 0144 111 110 100111 116 100000 1111001 6f 117 63 0110 1100101 0162 0145 100000 1111001 111 117 100000 97 114 0145 46 1010011 0105 0103 67 79 1001110 123 87 110011 110001 67 110000 1001101 32 55 060 100000 110111 0110 110011 32 53 51 0103 0103 060 0116 040 5a 0117 73 0101 7d 1001000 0141 1110110 1100101 100000 102 0165 0156 33</p></blockquote>

<p>十進法の値と二進法の値と八進法の値と十六進法の値が入り乱れている気がするテキスト。</p>

<pre><code>class String
  def parse
    case
      when self.start_with?('0')
        self.to_i(8)
      when self =~ /\A[01]+\z/ and self.length &gt; 3
        self.to_i(2)
      when self =~ /[a-f]/
        self.to_i(16)
      else
        self.to_i(10)
    end
  end
end

data = gets.strip.split(' ')
puts data.map(&amp;:parse).map(&amp;:chr).join
</code></pre>

<p>Answer: <code>SECCON{W31C0M 70 7H3 53CC0N ZOIA}</code></p>

<h1>Choose the number (Programming 100)</h1>

<blockquote><p>nc number.quals.seccon.jp 31337</p>

<p>sorry fixed URL</p></blockquote>

<p>ncすると数列と問題が流れてくる。サンプルは以下の通り。</p>

<pre><code>-5, -9
The minimum number? -9
6, 7, -4
The minimum number? -4
1, -7, 7, 1
The maximum number? 7
6, 8, -5, -4, -5
The minimum number? 8
-3, -5, -8, -6, -1, 0
The maximum number? 0
-1, 1, 4, 2, -6, -6, 0
The maximum number? 4
0, 4, -2, 1, 9, -9, 7, -4
The maximum number? 114514
Wrong, bye.
</code></pre>

<p>与えられた数列に対して、その中での最大値もしくは最小値を答える。Rubyで入力を<code>,</code>で区切って数値化して<code>Enumerable.(max|min)</code>で答えるプログラムを書いた。入出力のデバッグで10分は取られてすごくつらい。</p>

<pre><code>require 'socket'

SERVER_URI = 'number.quals.seccon.jp'
SERVER_PORT = 31337
LOG_NAME = 'comm.log'

def read_question(sock)
  s = ''
  while true
    c = sock.getc
    if c == '?'
      s &lt;&lt; c
      s &lt;&lt; sock.getc # whitespace
      break
    elsif c.nil?
      break
    end
    s &lt;&lt; c
  end
  s
end

begin
  sock = TCPSocket.open(SERVER_URI, SERVER_PORT)
  file = File.open(LOG_NAME, 'a')

  num_str = ''
  qstr = ''

  while true
    num_str.clear
    qstr.clear

    num_str = sock.gets
    if num_str.include?('bye')
      fail 'connection closed by host'
    end

    qstr = read_question(sock)
    file.puts num_str
    file.print qstr
    file.flush

    nums = num_str.split(',').map(&amp;:strip).map(&amp;:to_i)
    qstr.strip!
    ans =
      case qstr
      when 'The minimum number?'
        nums.min
      when 'The maximum number?'
        nums.max
      else
        fail 'unknown question'
      end
    file.puts ans
    sock.puts "#{ans}\n"
    sock.flush
    file.flush
  end
rescue =&gt; e
  puts 'something went wrong!'
  p e
  puts 'num_str = ' + num_str unless num_str.empty?
  puts 'qstr = ' + qstr unless qstr.empty?
ensure
  file.close
  sock.close
end
</code></pre>

<p>ちなみに<code>sock.puts</code>で答えを投げてるところに改行文字を入れてなかったのでバグってた。そんなのアリかよ(<code>puts</code>はそもそも改行を最後に入れるはずでゎ……)。しかしWiresharkで通信見たら問題の送信タイミングがおかしくて、それで気付いたのでやはりWireshark最強。</p>

<h1>Get from curious &ldquo;FTP&rdquo; server (Network 300)</h1>

<blockquote><p><a href="ftp://ftpsv.quals.seccon.jp/">ftp://ftpsv.quals.seccon.jp/</a></p></blockquote>

<p>Chromeで見に行くとCOMMAND_NOT_SUPPORTEDとか言われてダメ。よくわからないのでとりあえず<a href="http://ja.wikipedia.org/wiki/FTP%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E4%B8%80%E8%A6%A7">FTPコマンド一覧</a>を片手にtelnet。</p>

<p>ログインしろと言われるがanonymousしかないと言われるので<code>USER anonymous</code>で接続。とりあえず<code>PWD</code>してみると<code>/</code>にいる。じゃあ<code>LIST</code>してみるかと思って<code>LIST</code>すると&#8221;not implemented&#8221;と言われる。そんなFTPサーバーがあるか。仕方ないので片っ端からコマンドを試そうとする。一覧の一番上は<code>ABOR</code>だったけど、さすがに何も転送してないのに<code>ABOR</code>しても仕方ないと思って、その次の<code>ACCT</code>にしてみる。そうすると<code>PORT</code>か<code>PASV</code>をしろと言われる。え、アカウント情報の転送って転送用のコネクションいるんですか、と思いながら電卓片手に<code>PASV</code>を叩いて、別のターミナルで指定のポートにtelnet（なんでncじゃなかったんだろう）。一応念のためもう一度<code>LIST</code>してみたけど相変わらず未実装らしいので<code>ACCT</code>を投げると、なぜか<code>LIST</code>相当の処理が走って別ターミナルにファイル一覧が流れてきた。何が起きたかさっぱりわからないが、「<code>key_is_in_this_file_...</code>」みたいなファイルがいるらしいので、<code>RETR</code>コマンドでそのファイルを持ってくる。</p>

<blockquote><p>Answer: <code>SECCON{S0m3+im3_Pr0t0c0l_t411_4_1i3.}</code></p></blockquote>

<p>参考までに通信内容。</p>

<pre><code>% telnet ftpsv.quals.seccon.jp 21
Trying 133.242.224.21...
Connected to ftpsv.quals.seccon.jp.
Escape character is '^]'.
220 (vsFTPd 2.3.5(SECCON Custom))
USER anonymous
331 Please specify the password.
PASS pass
230 Login successful.
PWD
257 "/"
LIST
502 LIST not implemented.
ACCT
425 Use PORT or PASV first.
PASV
227 Entering Passive Mode (133,242,224,21,252,27).
LIST
502 LIST not implemented.
ACCT
150 Here comes the directory listing.
226 Directory send OK.
PASV
227 Entering Passive Mode (133,242,224,21,255,82).
RETR key_is_in_this_file_afjoirefjort94dv7u.txt
150 Opening BINARY mode data connection for key_is_in_this_file_afjoirefjort94dv7u.txt (38 bytes).
226 Transfer complete.
</code></pre>

<p>別ターミナルの方。</p>

<pre><code>% telnet ftpsv.quals.seccon.jp 64539
Trying 133.242.224.21...
Connected to ftpsv.quals.seccon.jp.
Escape character is '^]'.
-rw-r--r--    1 0        0              38 Nov 29 04:43 key_is_in_this_file_afjoirefjort94dv7u.txt
Connection closed by foreign host.

% telnet ftpsv.quals.seccon.jp 65362
Trying 133.242.224.21...
Connected to ftpsv.quals.seccon.jp.
Escape character is '^]'.
SECCON{S0m3+im3_Pr0t0c0l_t411_4_1i3.}
Connection closed by foreign host.
</code></pre>

<h1>Making a bot (Programming 0)</h1>

<p>この辺で解けそうな問題がなくなり人権を失ったが、@re_Ordが問題を解いたというので、Slack上でいいね！ができるようにbotに手を入れ始めた。つまるところ別のことをし始めた。</p>

<p>元々hubotで（主に@opが使う）違法語句に対して全自動で:fu:を投げ付けるbotを書いていたのでそこに追加する形で実装した。永続化ストレージはなんかRedisの例ばかりだったのでとりあえずRedisにした。永続化ストレージをくっつけたついでに、違法語句を使用したときにお前の罪を数えろと言わなくていいようにkarmaポイントを記録するようにした。これで積極的に（主に@opに）罪の精算を迫っていこうと思う。最初の+1は@re_Ordに捧げられた。+1。</p>

<p>ただ違法語句を使用したときに:fu:が飛ぶという仕様のせいで、botの名前をkogasa-chanにできないしアイコンに小傘ちゃんを使うこともできなくなった。あのかわいい小傘ちゃんは中指など飛ばさないのである。悩ましいことである。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 オンライン予選 その他諸々]]></title>
    <link href="http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-preliminary/"/>
    <updated>2014-07-20T19:24:34+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-preliminary</id>
    <content type="html"><![CDATA[<p>2014-07-19 09:00 - 21:00に行われたSECCON 2014 オンライン予選について、その他諸々。</p>

<p>個別に書いたのは次の2つ。</p>

<ul>
<li><a href="/blog/2014/07/20/seccon2014-online-amida/">あみだくじ</a></li>
<li><a href="/blog/2014/07/20/seccon2014-online-printit/">Print it</a></li>
</ul>


<p>この2つとここで書かれていないのは問題見てすらいません˙꒳˙</p>

<h2>decode me</h2>

<p>ダウンロードした<code>encoded.txt</code>を見ると盛大に文字化けしてるんだけど、<code>FRPPBA 2014</code>という文字を見た瞬間にここが<code>SECCON 2014</code>であることを確信。ということは換字式暗号か何かなんだろうけど、<code>ebg13/47</code>という文字が気になる。とここで@re_Ordが「rot13/47というのがあるらしい」。なんじゃそりゃと思って調べてみると、rot13を拡張したそういう暗号があるらしかった。</p>

<p>rot13/47はnkfコマンドで簡単に変換出来るので、それを実行しておしまい。</p>

<h2>ソーシャルハック？</h2>

<p>私はページを開いて「天安門事件」って入力したら即座に退出されてしまったのであんまり遊んでません。</p>

<h2>捏造された契約書を暴け</h2>

<p>降ってきたファイルを展開すると<code>Timestamp.dd</code>というファイルが得られる。ここから特定の日付以降になってるようなファイルを探す。日付だから年が入ってるだろうと思って、マウントして云々とかは一切せずに<code>strings Timestamp.dd | grep 2012</code>とかやると1つだけ結果が出てくる。</p>

<p>……で、300点問題だし、まさかそんなわけないよねー、と思ってそれをスルーしてマウントして探し始めたところ、隣で@yuscarletがこの問題を通していた。正解はまさかの先ほど<code>strings</code>やって出てきた日付だったらしい。</p>

<p>よくわかんなくてもとりあえず送信しておくべきですね（白目）</p>

<h2>重ねてみよう</h2>

<p>チーム複数人でまずImageMagickでgif画像を分解して合成云々で粘っていた。これ合成したらQRコードとか出てくるんだろとか思っていたら実際に出てきたのはQRコードでした。</p>

<p>ちなみに、ImageMagickでgif画像を分解、色を反転、透過色を設定……ってやったけどどうにも合成が上手く行ってなかったらしい。で、最終的に取った手段は透過色の設定までやった画像ファイルを全部GIMPに突っ込んでレイヤーとして開き、一番下に白一色のレイヤーを追加するという方法でした。GIMP最強じゃん（</p>

<h2>詰将棋</h2>

<p>突然のurandom将棋部発足。私は何もしてません（</p>

<p>盤面をにらめっこして頭の中で考えるよりも、適当な紙を用意して駒と盤面作った方がよかったようです。</p>

<h2>諸々</h2>

<p>チーム内連携で解けた割と問題があって、今回は結構みんな神が降りていた気がします。ググれる文鎮とは私のことだ！（迫真）</p>

<p>最後の1時間くらい、他のメンバーがDecrypt it!を解いている間に祈っていたら、どうやら全国行けるようです。最後の瞬間のランキングを確認してないんですがひょっとしたらチーム1位かもしれません。やったね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 オンライン予選 【Print it!】]]></title>
    <link href="http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-printit/"/>
    <updated>2014-07-20T18:53:55+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-printit</id>
    <content type="html"><![CDATA[<p>2014-07-19 09:00 - 21:00に行われたSECCON 2014 オンライン予選のWrite-upです。次は「Print it!」。</p>

<h2>問題概要</h2>

<p>謎のファイルが降ってきます。以上。</p>

<h2>解法</h2>

<p>降ってきたファイルの正体は&#8221;Standard Triangulated Language&#8221;というフォーマットのファイル(参考: <a href="http://ja.wikipedia.org/wiki/Standard_Triangulated_Language">Wikipedia</a>)で、このフォーマットのバイナリ形式で記録された3Dモデルです。このファイルを適切なアプリケーションで開くと3Dモデルを見ることが出来て、そのモデルにフラグが書かれています。</p>

<p>ans: <code>Bar1kaTaLab.</code></p>

<h2>経緯</h2>

<p>とりあえずファイルをバイナリエディタに突っ込んでビットマップで見てみると、かなり規則性の高いらしいということはわかったのですが、それ以上のことはさっぱりわからず。nullが14個くらい続いてたりとか、それが繰り返されてたりとか、その辺の規則性が高いわりに、先頭には普通にテキストが入っているし、テキストの間にはまたもnullが入っていてよくわかんないなぁと思ってました。</p>

<p>先頭のテキストには意味がないんじゃないかと思って削ってみても、削った後の先頭数バイトが何かのシグネチャになってるわけではありませんでした。あと、前述のnullが続いている箇所がかなり多いことから圧縮されているわけでもなさそうだということはわかりました。</p>

<p>問題名がPrint it!なので、きっと何かにPrintするんだろうと思って、仮想プリンタドライバにlprコマンドでデータを送りつけても何も起きませんでした。他に&#8221;Print&#8221;に関係しそうなファイルフォーマットを考えてみましたが、たいていがテキスト形式のもので、問題ファイルとは噛み合いません。あとpbcopyでコピーしてコンソールに無理矢理突っ込んだらえらい目にあいました。</p>

<p>じゃあテキストに意味があるのだろうと思って削らないままで眺めてみると、先頭のテキスト（＋謎データ）群のサイズがちょうど80bytesでした（&#8221;Thanks!&ldquo;で終わっていたので切れ目はわかりやすかった）。80byte、やたらキリがいい。そんな話を@6f70として、じゃあきっと先頭80bytesは何かしらのヘッダーに違いない！　……ということで、先頭80bytesがヘッダになってるようなファイルフォーマットを探すと……</p>

<p><img src="/images/seccon2014-printit-google.png"></p>

<p>……なるほどね（白目）</p>

<p>これほどまでに検索結果のスニペットが欲しい情報をピンポイントで持ってきたことはもはや感動的ですらあるので引用しておくと</p>

<p><blockquote><p>米国のスリーディー・システムズ（英語版）によって開発された三次元CADソフト用の<strong>ファイルフォーマットシステム</strong>。多くのソフトにサポートされ &hellip; バイナリーSTLファイルは<strong>80バイト</strong>の任意の文字列で開始される（通常内容は無視される。ただし、 solid から記載を  &hellip;</p></blockquote></p>

<p>そんなわけで、このファイルフォーマットのバイナリ形式では先頭80bytesは無視されること、このフォーマットはfloatの値がずらーっと並んでいることがわかりました。floatの値が並んでいるだけなら、確かにデータに規則性があって、nullが連続しているのも納得です。</p>

<p>私のマシンにはこれを見られるものがなかったので、Wikipediaの記事の外部リンクにあった3DViewというChromeのアプリを入れてファイルを読むことで解答が得られました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 オンライン予選 【あみだくじ】]]></title>
    <link href="http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-amida/"/>
    <updated>2014-07-20T00:29:19+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-amida</id>
    <content type="html"><![CDATA[<p>2014-07-19 09:00 - 21:00に行われたSECCON 2014 オンライン予選のWrite-upです。今回は「あみだくじ」。</p>

<h2>問題概要</h2>

<p>問題は64bit ELF形式の実行ファイル<code>amida</code>。これを実行すると「No.i」(i = 1, 2, &hellip;)と書かれた行に続けて1から順に番号が振られたあみだくじが表示され、いずれかの終端の1箇所に*印がついている。……が、後になると</p>

<ul>
<li>番号の振り方が逆 (左から1, 2, &hellip;ではなく8, 7, &hellip;になっている)</li>
<li>そもそもくじの上下が逆</li>
<li>各行の先頭にnull文字が突っ込まれている <ins datetime="2014-07-22T10:21:00+09:00">（追記: これは出題者の意図していない、問題プログラムのバグだった模様）</ins></li>
<li>くじの縦線の間が広がる</li>
<li>くじが横向きになる</li>
</ul>


<p>……といった面白形式で表示されるようになります。具体例は最後に書いてあるのでそちらを。</p>

<h2>解法</h2>

<p>問題を確認せずに1から順に解答してみる。</p>

<p>やることとしては、次の手順をフラグが得られるまで繰り返します。</p>

<ol>
<li><code>amida</code>は問題を出力した後<code>?</code>という文字を出力して入力待ちに入るのでそれが見つかるまで読み捨てる</li>
<li>次の解答を試す</li>
<li>正解ならその番号を記録して、試行する番号を1にリセット。次の問題へ。</li>
<li>不正解なら<code>amida</code>は<code>Wrong</code>を出力して終了するので、<code>amida</code>を再び立ち上げて、これまでの正解番号を次々に入力して、失敗したところまで進める。</li>
</ol>


<p>なお、実際には問題の記録のために問題は読み捨てるのではなく、読んだものをファイルに保存しました。</p>

<p>この方針の提案と、この後に行うソルバの実装は@yuscarletがC++で、amidaとソルバの間を適当に受け持つ部分をRubyで私が実装しました。最終的に使用した総当たり方式はRubyのみで実装しました。</p>

<p>ところでamidaの実行ファイルなんですが、異様に問題出力が遅いんですね。私と@yuscarletが順当（？）にプログラム書いてる一方で@6f70が<code>amida</code>のプログラムを解析していて、それによって「問題数は1000問であること」、「問題を出力する際に<code>sleep</code>が噛まされている」ということがわかりました。そこで彼が問題を出力するときに挟まっている<code>sleep</code>を潰したバイナリを用意して、それを用いて総当たり法を実行。結果としてプログラムを動かしてから5分かそこらくらいでフラグを得ました。</p>

<p>ans: <code>c4693af1761200417d5645bd084e28f0f2b426bf</code></p>

<h2>その他諸々</h2>

<p>一旦この総当たり方式で実装してみたんですが、どうにも上手く行かなかった（問題の終了判定が上下が逆転しているケースに対応していなかったり諸々）のとさすがにあまりにも遅かったので（この原因は上述の<code>sleep</code>）ソルバで真っ正面から解いてみようということになりました。</p>

<p>（※最初は1行ずつ読んで判定していたので上手く行きませんでした。ソルバによる解答を諦めた後に1文字ずつ読めばいいことに気がついて上述の解答となりました）</p>

<p>番号やらくじの向きやら幅やらが変わっていることに気がつく度にソルバやらRubyのプログラムやらを修正していたんですが、51番目でくじが横向きになっているのがわかると「こんな調子でいろんなパターン対応してたらキリがない」として、ソルバによる解答を放棄して、最初の総当たり方式に戻しました（ちなみに他の方のwrite-upを読むとどうやら100問目までで全パターンが出ていた模様）。</p>

<p>あと番号が逆とかくじの上下が逆とかはともかくとして、null文字突っ込まれてるのは最高にタチが悪いと思いました（小並感）。これ、ソルバによる解答をしているときに遭遇してめちゃくちゃ悩んでて、最終的に問題をファイルに保存してvimで眺めるまでわかりませんでした。</p>

<p>それと1000問あるらしいということと<code>sleep</code>が入っていることがわかったのは結構大きかったですね。前者がわかっていたことでソルバによる対応を諦める判断をすぐに下せましたし、後者が判明していたこと、かつそれを潰せたことで、解答にかかる時間をかなり短縮出来ました。</p>

<h2>コード</h2>

<p><a href="https://gist.github.com/mayth/f162efa8dc06cd05e5e3">gist</a></p>

<p><figure class='code'><figcaption><span> (amida.rb)</span> <a href='/downloads/code/amida.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">read_problem</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'>  <span class="n">problem</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ch</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">getc</span>
</span><span class='line'>    <span class="k">break</span> <span class="k">if</span> <span class="o">!</span><span class="n">ch</span> <span class="o">||</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;?&#39;</span>
</span><span class='line'>    <span class="n">problem</span> <span class="o">&lt;&lt;</span> <span class="n">ch</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">getc</span>
</span><span class='line'>  <span class="n">problem</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">answers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">playback</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">io</span><span class="p">)</span>
</span><span class='line'>  <span class="n">answers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">ans</span><span class="o">|</span>
</span><span class='line'>    <span class="n">read_problem</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">puts</span> <span class="n">ans</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">pnum</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;|./amida_mod&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>    <span class="n">playback</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">io</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">problem</span> <span class="o">=</span> <span class="n">read_problem</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;amida2_problem_</span><span class="si">#{</span><span class="n">pnum</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">problem</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">io</span><span class="o">.</span><span class="n">puts</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">io</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;Wrong&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="o">!</span><span class="n">result</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;No.&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;&gt;&gt;&gt; </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">answers</span> <span class="o">&lt;&lt;</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">puts</span>
</span><span class='line'>      <span class="nb">warn</span> <span class="s2">&quot;solved: </span><span class="si">#{</span><span class="n">pnum</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">pnum</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>問題例</h2>

<p><a href="https://gist.github.com/mayth/56bde157140dd52e260c">gist</a></p>

<p><figure class='code'><figcaption><span>Problem Samples </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 2 3 4 5 6 7 8
</span><span class='line'>|-| |-| | | |-|
</span><span class='line'>| | | | | |-| |
</span><span class='line'>| | | | | | |-|
</span><span class='line'>|-| | |-| | | |
</span><span class='line'>| | |-| |-| |-|
</span><span class='line'>|-| | |-| | | |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>|-| |-| | | | |
</span><span class='line'>| | | | |-| | |
</span><span class='line'>| | |-| | | |-|
</span><span class='line'>|-| | | |-| | |
</span><span class='line'>| | |-| | |-| |
</span><span class='line'>| | | | |-| | |
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>| | |-| | | |-|
</span><span class='line'>| | | | | |-| |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>|-| |-| | | | |
</span><span class='line'>| | | | | |-| |
</span><span class='line'>              *&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>1 2 3 4 5 6 7 8
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>|-| |-| |-| | |
</span><span class='line'>| |-| | | | |-|
</span><span class='line'>|-| |-| | |-| |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>| | |-| | |-| |
</span><span class='line'>| |-| | | | |-|
</span><span class='line'>| | | | | | | |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>|-| |-| | |-| |
</span><span class='line'>| | | |-| | |-|
</span><span class='line'>|-| | | | | | |
</span><span class='line'>| |-| | |-| | |
</span><span class='line'>|-| |-| | | |-|
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>|-| |-| |-| | |
</span><span class='line'>| |-| |-| |-| |
</span><span class='line'>|-| | | | | | |
</span><span class='line'>| | | | | |-| |
</span><span class='line'>            *&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    *      
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>|-| |-| | | | |
</span><span class='line'>| |-| | | | |-|
</span><span class='line'>|-| | |-| | | |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>| | |-| | | | |
</span><span class='line'>| |-| |-| |-| |
</span><span class='line'>| | | | | | | |
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>|-| |-| |-| | |
</span><span class='line'>| |-| |-| | |-|
</span><span class='line'>| | |-| | | | |
</span><span class='line'>|-| | | |-| |-|
</span><span class='line'>| | |-| | | | |
</span><span class='line'>| | | | |-| | |
</span><span class='line'>|-| |-| | |-| |
</span><span class='line'>| | | | | | | |
</span><span class='line'>| | | | | |-| |
</span><span class='line'>|-| |-| | | |-|
</span><span class='line'>| |-| | |-| | |
</span><span class='line'>8 7 6 5 4 3 2 1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>             *    
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>|-|  |  |  |  |&ndash;|   |
</span><span class='line'>| |  |&ndash;|  |&ndash;|  |   |
</span><span class='line'>| |&ndash;|  |  |  |  |   |
</span><span class='line'>|-|  |  |  |  |  |&mdash;|
</span><span class='line'>| |  |  |  |&ndash;|  |   |
</span><span class='line'>|-|  |&ndash;|  |  |  |&mdash;|
</span><span class='line'>| |  |  |&ndash;|  |  |   |
</span><span class='line'>| |  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |  |&ndash;|  |   |
</span><span class='line'>|-|  |  |&ndash;|  |  |&mdash;|
</span><span class='line'>| |  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |&ndash;|  |  |&mdash;|
</span><span class='line'>|-|  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |  |  |  |&mdash;|
</span><span class='line'>| |  |  |&ndash;|  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |  |&ndash;|  |   |
</span><span class='line'>| |  |  |&ndash;|  |  |&mdash;|
</span><span class='line'>| |  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |&ndash;|  |  |&mdash;|
</span><span class='line'>1 2  3  4  5  6  7   8&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>1&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>  | |  |  | | |  | &lt;br/>
</span><span class='line'>2&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'> | | |   | | | |   &lt;br/>
</span><span class='line'>3&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>  |   |   | | |    &lt;br/>
</span><span class='line'>4&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-*
</span><span class='line'>   |   | |      | |&lt;br/>
</span><span class='line'>5&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>     |      |  | | &lt;br/>
</span><span class='line'>6&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>    |     |  |     |
</span><span class='line'>7&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>   |  | |  |   |  |&lt;br/>
</span><span class='line'>8&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-1
</span><span class='line'> | |   | | |  |  | &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-2
</span><span class='line'>  |  |  |    |  |  |
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-3
</span><span class='line'>   |          |   |&lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-4
</span><span class='line'>  |  | |   | | | | &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-5
</span><span class='line'> |  | |   |   | |  &lt;br/>
</span><span class='line'>*&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-6
</span><span class='line'>        |   |  |   &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-7
</span><span class='line'> | | | | | |  | | |&lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-8&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-1
</span><span class='line'>       |    |      |
</span><span class='line'>       |    |      |
</span><span class='line'>*&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-2
</span><span class='line'>   | |     | | | | &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-3
</span><span class='line'> |    |  |    |    |
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-4
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-5
</span><span class='line'> |       |  |  | | |
</span><span class='line'> |       |  |  | | |
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-6
</span><span class='line'>  | | | |  | |  |  &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-7
</span><span class='line'> |     | |  |  |   &lt;br/>
</span><span class='line'> |     | |  |  |   &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-8</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
