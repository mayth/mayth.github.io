<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tkbctf | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/tkbctf/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-07-20T19:46:25+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tkbctf3 miocat]]></title>
    <link href="http://tech.aquarite.info/blog/2014/05/07/tkbctf3-miocat/"/>
    <updated>2014-05-07T13:26:00+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/05/07/tkbctf3-miocat</id>
    <content type="html"><![CDATA[<p>miocat（みお・きゃっと）はとある伝説の脱ヲタエンジニアが書き上げた伝説のプログラムに着想を得てっていうのはどうでもいいとして、実際のところは.NET Frameworkのとある仕様に関する問題です。<strong>でした</strong>。以下本来の意図の説明です。</p>

<h1>ソースコード</h1>

<p>と、その前に。今回のソースコードは<a href="https://github.com/tkbctf/archive">tkbctf/archive</a>に上げておきます。結構問題の核心以外の部分で苦労してたりしますがそれはそれということで。</p>

<p>追記: 上げました -> <a href="https://github.com/tkbctf/archive/tree/master/tkbctf3/web250_miocat">tkbctf/archive/tkbctf3/web250_miocat</a></p>

<h1>問題の説明</h1>

<p>指示されたアドレスにWebブラウザからアクセスすると、タイトルとフォーム（入力フィールド1つとボタン1つ + <code>hidden</code>のフィールド）のやる気の無いWebページが表示されます。</p>

<p>このフォームに適当なURLを入力して（このURLを<strong>ターゲットURL</strong>と言うこととします）<code>nya!</code>ボタンを押すと、ターゲットURLに対してmiocatサーバーがリクエストを行い、その結果をそっくりそのままレスポンスとして返します（<code>title</code>の中身だけ少し変わっていますが）。</p>

<p>実際には<code>http://</code>や<code>file://</code>など、スキーマ（らしき文字列）が先頭にないと<code>not acceptable</code>が表示されます。それらしき文字列であればなんでもいいので、<code>abc://</code>でも通ります。また、サーバーは外部へのアクセスが遮断された状態で稼働していたので、<code>http://www.google.com</code>などをターゲットに指定しても失敗します。</p>

<p>さて、miocatはターゲットURLを上述の「スキーマらしき文字列があるかどうか」のチェックをした後で、それが<code>file://</code>であるか否かのチェックをします。ここで<code>file://</code>であった場合も<code>not acceptable</code>のエラーになります。ところがこれをすり抜ける方法があります。それはMSDNの<a href="http://msdn.microsoft.com/ja-jp/library/dd465121(v=vs.110">.NET Framework で文字列を使用するためのベスト プラクティス</a>.aspx)にも記載されているまさにそのままの方法です。つまり、フォームのhiddenになっていた<code>locale</code>の値、およびクエリパラメータに含まれる<code>locale</code>の値がそのスレッドのカルチャになっているので、<code>locale=tr-TR</code>なんて値を指定すると見事にトルコ語ロケールに切り替わり、<code>FILE://</code>で始まっているかのどうかの比較をカレントスレッドのロケールで行うためにチェックをすり抜けてしまいます。</p>

<p>ということは、トルコ語ロケールに切り替えてしまえば<code>file://...</code>であるようなURLでもmiocatがリクエストを出します。これはmiocatが動作するユーザーが読めるファイルは全て読めることを意味しています。なので<code>/etc/passwd</code>を読んでみたり（`/etc/passwdにはヒントというか、「これを読め」という指示が書かれていました）適当に推測してみたりして、結果的にflagファイルを読めればおしまいです。</p>

<p>miocatの仕組みというか中身は以上です。まぁ、.NETのその仕様を知っていれば一瞬で解けてしまうような問題でした。過去2回F#とILを読ませる問題だったので、少し捻った.NET系の問題を出してみようと思った結果コレになりました。</p>

<h2>ディレクトリトラバーサル</h2>

<p>しかしながら現実とは非情な物でして、ディレクトリトラバーサルの脆弱性を素で作り込んでいました。というか、内部的には上記のURLチェックをした後に<code>WebClient</code>の<code>DownloadString(string)</code>を呼んでるだけなんですが、まさかそいつが普通にカレントディレクトリを読みに行くとは全く予想しておらずチェックもしていなかったというのが実際のところです。いやまぁ、普通与えられたURLをそのまま読みに行くなんて無茶苦茶なことはしないと思うので問題にはならないんでしょうけど。</p>

<p>というわけでその場合はどのようにするかと言いますと、<code>hoge://../../../etc/passwd</code>とかなんとかすると<code>/etc/passwd</code>が読めるので後は上記と同じです。<code>file://</code>と同じように<code>http:///etc/passwd</code>とかすると<code>/home/miocat/http:/etc/passwd</code>を読みにいくんですが、この辺りの仕様は正直私もわかってません。WebClientとかUriの実装読めというお告げなんですかねコレ。（この辺は別の記事でやりたいと思います）</p>

<p><del>スキーマの部分切り落として</del><strong>訂正: 切り落としてるのではなく、単にディレクトリとして認識されていた模様（つまり<code>abc://etc...</code>は<code>/home/miocat/abc://etc...</code>）</strong>カレントディレクトリを基点にしてファイルを読みに行くのが個人的に結構ヤバイ挙動だと思ってるんですがどうなんでしょう……。</p>

<h2>エラー処理</h2>

<p>あとこれも完全な手落ちでしたがエラーメッセージにフルパスぶち込まれてるのも良くなかったですね。はい。すっごい初歩的なところですが……。</p>

<h1>まとめ</h1>

<p>普通に安全なプログラムを書いてから穴を開けるべきだったんだろうなぁと思ってます。今までバイナリ（というかC#/IL）を読ませるような問題しか書いてなくて、こういうタイプの問題は初めてだったわけですけど、難しいですね。（ていうかなぜド素人が問題書いてるのか）</p>

<p>それ以外にも、この方針で行こうと決めてから難易度低すぎなのでアレやコレやと思索してみてやっぱり没になったとか、grepが高速化した云々でちょうどトルコ語らへんが話題になって「あっこれヤバくね」とか思ったりとかいろいろありました。</p>

<p>次のtkbctfはどうなるのかわかりませんが、そろそろ筑波大学期待の新人達が私たちよりよっぽど上手くやってくれるんじゃないかなと期待しております。それでは。</p>
]]></content>
  </entry>
  
</feed>
