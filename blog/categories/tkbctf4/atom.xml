<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tkbctf4 | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/tkbctf4/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2015-03-12T19:50:17+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tkbctf4 [misc 400] amida]]></title>
    <link href="http://tech.aquarite.info/blog/2014/11/24/tkbctf4-amida/"/>
    <updated>2014-11-24T06:11:50+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/11/24/tkbctf4-amida</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/11/24/tkbctf4-cheerofcpu/">Cheer of CPU</a>に続きましてmisc 400、amidaでございます。</p>

<p>この問題は私と@yuscarletによる作成です。</p>

<h1>問題</h1>

<blockquote><p><code>203.178.132.117:42719</code></p>

<p><a href="http://en.wikipedia.org/wiki/Ghost_Leg">Ghost Leg - Wikipedia, the free encyclopedia</a></p></blockquote>

<p>現在問題文中のサーバーは停止しています。こちらもソースコードはgithubで公開されていますので、試したい方はどうぞ。<a href="https://github.com/tkbctf/tkbctf4/tree/master/misc400_amida">tkbctf4/misc400_amida at master · tkbctf/tkbctf4</a></p>

<p>なお実際の問題は<a href="https://github.com/mayth/fafrotskies">fafrotskies</a>というCPUを100%持っていく素敵な自作サーバーと連携して動作していました。</p>

<p>問題中に英語版Wikipediaの&#8221;Ghost Leg&#8221;の記事にリンクが張ってありますが、「あみだくじ」って英語では&#8221;Ghost Leg&#8221;というそうです。</p>

<h1>概要</h1>

<p>所定のサーバーにアクセスすると無駄なようこそメッセージの後にBase64な文字列が降ってきます。これをデコードするとPNG画像が現れます。画像の内容はあみだくじの画像で、縦棒の各上端（始点）に番号が振られていて、縦棒のうち1つの下端（終点）に黒丸があります。黒丸に辿り着くような始点の番号をサーバーに送りつけて、正解なら次の問題が送られてきて、不正解ならその場で切断されます。こんな感じで1ステージ50問×20ステージ、計1000問解くとフラグが降ってきます。</p>

<p>とはいえまぁ単純なあみだくじを1000問も解かせるなんてことはないわけです。5ステージを1つのブロックとすると4つのブロックがあるわけですが、最初のブロックから次のような感じであみだくじが変化していきます。</p>

<ol>
<li>普通のあみだくじ</li>
<li>横線が波線になる（横線の始点と終端のy座標は同じ）</li>
<li>あみだくじが回転する（0°〜359°）</li>
<li>横線が波線になり、かつ回転する</li>
</ol>


<p>で、各ブロックの最初のステージでは縦線が4本ですが、次のステージでは5本、その次では6本……となり、ブロックの5ステージ目では縦線が8本になります。次のブロックに進むと縦線の数は4本に戻り再び8本まで増えていきます。</p>

<p>この辺はリポジトリの<code>casegen</code>を参照してください。<code>casegen</code>はステージ数を受け取ってそれを元に<code>amida_ev</code>に渡す引数を変えるRubyスクリプトです。<code>amida_ev</code>は<code>generator.cpp</code>をコンパイルしたバイナリで、それに渡す引数で生成されるあみだくじが変わるようになっています。<code>-r</code>で回転、<code>-w</code>で波線、<code>-nN</code>で縦線がN本になります。</p>

<p>なお、さすがに全問解かないとフラグが来ないのでは時間的に誰も辿り着けない可能性があったので、問題投入後しばらくしてから各ブロックの終了時にチェックポイントを追加し、結果的に配点が変わりました。元々最終フラグのsubmitで300点でしたが、チェックポイント3つと最終フラグ1つの計4つのフラグにそれぞれ100点を割り振り合計400点の問題となりました。</p>

<p>結局競技時間内に最終フラグをsubmit出来たチームはありませんでしたが、非常に惜しいことになっていたチームがあったようで……</p>

<blockquote class="twitter-tweet" lang="ja"><p>何がCongrats!だ，checkpointという文字列を入れろ</p>&mdash; まーす (@__math) <a href="https://twitter.com/__math/status/529212264402804736">2014, 11月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>まーす氏にあみだプログラム貰って俺の環境でも動かしてたら終了5分前に1つヒットする→ログに吐いてない→大慌てでうさみみ64bit版落としてくる→終了30秒後にメモリから救出出来る</p>&mdash; きひろちゃん (@aki33524) <a href="https://twitter.com/aki33524/status/529212031551815680">2014, 11月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>私「（最終）フラグはcheckpointじゃない」</p>

<h1>プログラムについて</h1>

<p>地味に面倒なことをしています。元々単純に縦線を描画して、y座標をランダムに生成してそこに横線を描く（なお横線が直線だとは言っていない）、という実装だったんですが、横線が連続してしまうケースとか、終端に横線がくっついてしまうケースとかがあって、その辺を調整した上で横線の座標を決定する辺りを@yuscarletに書いてもらいました。それ以外にはオプションのパースの実装も書いてもらっています。</p>

<p>なので私はあまりその辺のロジックはあまり苦労してなくて（逆に言うとロジックで面倒なところは全部やってもらった）、むしろ私を苦しめたのはcairoだったのでした……。何が一番つらかったかってPNG画像をファイルに吐くか、吐き出すデータ(<code>unsigned char*</code>)を受け取るコールバックを指定して吐き出すかのどちらかしか選択肢がなくて、「えっ適当なバッファに全部吐き出す関数とかそういうのないんですかファイルに出力する関数はあるのにえっ？」ってなってました。しかもコールバックに渡されるデータはどうやら「逐次」渡され、PNGファイル全体を出力するまでコールバックは複数回呼ばれるという仕様でいよいよ私の睡眠時間は0に近付いていきましたとさ。</p>

<p>そんな感じで、久々にグローバルに<code>unsigned char *buffer</code>とかいう変数を宣言しつつ、あとは適当にネットに転がっているbase64の実装を拾ってきてバッファ上のPNGファイルデータをエンコードして出力するようなプログラムを仕上げました。</p>

<p>ちなみに私が元々「サンプル実装」として書いたコードが出発点なせいで相当なクソコードになってたのでtkbctf4前半（1日目）終了後に書き直した上でbase64エンコードとかその辺追加してました。時間がないときに限って書き直したくなる法則が発動しました。おかげで寝られませんでした。</p>

<h1>感想とか諸々</h1>

<h2>元ネタ</h2>

<p>名前が名前だけに気付いている人もいましたが、この問題の元ネタは夏に行われたSECCON 2014オンライン予選で出題された「あみだくじ」です（リポジトリのREADMEにも記述しています）。</p>

<p>「あみだくじ」でやることとしてはこの問題と同じで所定の終端に辿り着く始点の番号をひたすら答えるとフラグがもらえる、という問題でした。この問題と異なる点はこんな感じ。</p>

<ul>
<li>あみだくじが画像じゃない（アスキーアート）</li>
<li>あみだくじがbase64じゃない</li>
<li>あみだくじが任意の角度に回転しない（アスキーアートだし）</li>
<li>あみだくじが上下反転する（180°の回転ではなくて上下のフリップという感じ）</li>
<li>実行バイナリが配布される形式であり、ローカルで試行出来る</li>
<li>何度実行しても出題される内容や順序は全く同じ</li>
<li>出題の度にsleepが挟まれている</li>
</ul>


<p>元ネタになった問題を解いたのも私と@yuscarletでして、まぁなんというか地味に苦しめられたというかなんというか。「任意の」角度には回転しないもののあみだくじが横向きになるとかはあって、形式が変わったためにプログラムが例外吐いて死ぬ度に私たちも悲鳴を上げながらプログラムを修正していく作業をひたすらしてました（最終的には総当たりしたんですけど）。それはともかく、その記憶がまだ鮮明に残っている中で私と@yuscarletで酒を飲んでるときに「なんかもっと嫌らしい『あみだくじ』作れねえかな」みたいな話になって、まずは画像化しようって話になって、「画像化してもなんか世の中には線認識ライブラリくらい転がってるから大丈夫じゃろｗ」とか言いながら適当にサンプル的な出題プログラムの実装書いてたらマジでそのまま問題になっちゃったって感じです。この段階ではもっと強烈な加工をかけることも考えてましたが自分たちで解法が実装どころか思いつきすらしなかったのでやめました。</p>

<p>まぁそういうわけで、つまるところ酔った勢いみたいなところは大いにあるわけで、</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/shiracamus">@shiracamus</a> 相当恨らまれてるな、これはｗ</p>&mdash; しらかみゅ (@shiracamus) <a href="https://twitter.com/shiracamus/status/529182836943630336">2014, 11月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>決して恨んでるわけではないです……はい……。（むしろ前述のfafrotskiesがCPUを100%持っていくので私が鯖管に恨まれている可能性の方が高い）</p>

<p>あとは元ネタの方のwrite-upを書いてあるのでそちらで。 <a href="/blog/2014/07/20/seccon2014-online-amida/">SECCON 2014 オンライン予選 【あみだくじ】</a></p>

<h2>難易度、解法とか</h2>

<p>元ネタとの相違で挙げた最後の2点だけでもぼちぼち難易度違ったんじゃないかなぁと思っています。というのも、ローカルで試行出来て何度やっても同じということはトライアンドエラーがいくらでも効くということで、実際私たちはこの問題を総当たりで解いています（sleepはopに潰してもらいましたが）。&#8221;amida&#8221;では問題生成はサーバー側で、しかも毎回ランダムに問題が生成されるのでそういうわけにはいかず、まともにあみだくじのソルバを書く必要があります。といっても、あみだくじの構造さえわかってしまえばソルバの実装自体は大して難しくはなくて、事実上「いかに回転する画像と戦いながら画像を認識するか」という問題だったと思います（横線が波線になるのは回転に比べれば大した問題ではないです）。</p>

<p>ちなみに初期の段階での想定解実装はOpenCVを使っていて、波線にした瞬間爆死したので真面目に線の認識をすると逆に死ぬんじゃないかと思います。その辺上手く手抜き（？）して直接ピクセルデータ見に行って云々ってやった方が確実ですし、そもそもOpenCVとか入れなくていいんで幸せになれたのではないでしょうか。</p>

<p>チェックポイント追加後のフラグ送信スピードとか見てるとやっぱ回転する辺りが大きな関門になってたのかなぁという印象です。黒丸のy座標を使うとか色々方法はあったようですが、ぶっちゃけこちらの想定解よりよほど頭のいい解法を皆さん考えられててすごいなぁと思って見てました（小並感）。</p>

<h1>最後に</h1>

<p>酔った勢いでも問題のアイディアは出てくるので、作問で詰まったら酒を飲もう！！！！（確か日本酒飲んでた気がする）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tkbctf4 [bin300] Cheer of CPU]]></title>
    <link href="http://tech.aquarite.info/blog/2014/11/24/tkbctf4-cheerofcpu/"/>
    <updated>2014-11-24T04:16:38+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/11/24/tkbctf4-cheerofcpu</id>
    <content type="html"><![CDATA[<p>tkbctf4が終了してからずいぶんと時間が経ちましたが皆様いかがお過ごしでしょうか。今更ではありますが[bin300] Cheer of CPUの解説というか、そんなようなものを書いてみようかと。</p>

<p>なお、問題のソースコードと配布されたバイナリはtkbctfのgithubリポジトリにあるので、そちらもどうぞ。 <a href="https://github.com/tkbctf/tkbctf4/tree/master/bin300_CheerOfCPU">tkbctf4/bin300_CheerOfCPU at master · tkbctf/tkbctf4</a></p>

<h1>問題</h1>

<blockquote><p>Did you hear a cheer of CPU?</p>

<p>The flag is the SHA-256 checksum of the program&rsquo;s output.</p>

<p>sample: <code>ruby -rdigest/sha2 -e 'puts Digest::SHA256.hexdigest("OUTPUT HERE".strip).downcase'</code></p>

<p><a href="https://s3-ap-northeast-1.amazonaws.com/tkbctf4/cheerofcpu">https://s3-ap-northeast-1.amazonaws.com/tkbctf4/cheerofcpu</a></p></blockquote>

<h1>概要</h1>

<p>問題の内容としてはあるプログラムが渡されるのでそれを調べる、というものです。プログラムは何かしら入力するとそれが所定の文字列と一致するかを調べ、一致していたら何らかのテキストを出力します。そのテキストのSHA256値を取って送りつければ得点となります。これだけ聞くととっても簡単ですが問題はコイツが<strong>64bit Mach-Oバイナリ</strong>ということでした。</p>

<h1>経緯</h1>

<p>元々は「なんか怪しげな言語でバイナリ吐いて読ませるような問題を作ろうぜ」というのが出発点です。様々な言語が候補に現れては消えていきましたが、私がちょうどMacを持ってるということでSwiftに白羽の矢が立ちました。（ちなみにこの発想から作られたもうひとつの問題は&#8221;rakuda&#8221;です。あの問題、なんか別ゲーになってる気がしますけど）</p>

<p>たださすがに当初はx86_64 Mach-Oで出すという想定はしていませんでした。が、コマンドラインアプリケーションとして作ってしまったのでiOSアプリにすることもできず、かといってSwiftコンパイラがそもそもx86環境向けのバイナリを吐けるようにできていないので、まぁそういう問題もありかなみたいな判断で結局x86_64 64bit Mach-Oで出題しました。</p>

<p>たださすがにMac OS X 10.10 (Yosemite) SDK使ったのはやりすぎだったかなと反省しております（とはいえ、私の環境には1つ前のバージョン、すなわち10.9 MavericksのSDKまでしか入ってなかったわけですが）。</p>

<h1>プログラムに関して</h1>

<p>というわけではじめてのSwiftかいはつ、となったんですがなんかSwiftの記法が結構キモくて大変でした（※個人の感想です）。あとSwiftって識別子に絵文字が使えることで有名ですが、なんかどっかで関数名見えたら嫌だなぁとか思ったので絵文字を使ったところgithubで見事に化けました。実際はこんな感じの開発風景でした。</p>

<p><img src="/images/20141124_cheerofcpu_sourcess.png" alt="screenshot of Cheer of CPU development environment" /></p>

<p>なんとなく格納されてるデータとか関数の役割とかが見えてきますね！　見えてきませんか？　見えてくるんでしょう？　……そうなんでしょ？</p>

<p>文字通りにクソみたいな見た目のコードは置いておいてその内容について触れておきます。内部でテキストデータは基本的に<code>Byte</code>(<code>UInt8</code>)の配列と<code>Int</code>の配列のタプルで保持されています。<code>strings</code>対策ですね。タプルの1つ目の要素がシャッフルされ、暗号化された状態のテキストのバイト列、2つ目の要素がシャッフル順です。シャッフルと書きましたが、テキストのバイト列はシャッフルされた後に暗号化された状態で保持されており、元の順番に復元するための情報が2つ目の要素にある配列、ということになります。暗号化は単純なxorですが、1要素暗号化する度にキーが変化するようになっています。その辺はソースコードを見て頂ければ。なお、最終的に出力されるテキストデータだけは、正解のキーを元にして生成された暗号化鍵と初期化ベクタを用いて、ChaCha20で暗号化された状態で保持しています。ちなみにChaCha20採用の理由ですが、CryptoSwiftに入っていたから以外に特に理由はないです。</p>

<p>動作としては概要で述べたもので、起動すると入力待ちになるので「キー」を入力します。これを内部で保持しているデータと比較し、一致していればそのキーを用いて鍵と初期化ベクタを生成し、テキストデータを復号化して出力します。</p>

<h1>作ってみた・出してみた感想とか諸々</h1>

<p>問題の難易度的には明らかに「プログラムが動く（または解析出来る）環境を用意出来るか否か」がハードルという感じでしたね。動かせる環境(Yosemite)があれば総当たりで行ける問題だなぁとか元々思ってたので事実上CTFプレイヤーにおけるMac普及率調査みたいになっていた感じもあります。別にApple信者でもなんでもないのでMac買ってくださいとは言いませんが。あるいはIDA Pro（無料版でない）があれば解析可能だったかと思います。私は持ってませんがopがやってたのでたぶん大丈夫だったんでしょう、たぶん（ていうかtkbctf4のバイナリ問はIDA Pro Freeで解析可能な問題の方が少なかったという異常事態でしたね）。</p>

<p>皆さんはこの無駄に高いハードルを超えて（Macを買うにしろIDA Proを買うにしろ『素人が購入するとは考えにくい』お値段故、素人ではないであろう皆さんでも難しいでしょう）「CPUの歓声」を聞くことは出来たでしょうか。</p>

<p>ちなみに、これ出題してから&#8221;tkbctf&#8221;とか色々なワードでTwitterで検索かけてまして、64bit Mach-Oバイナリに思わず「歓声」を上げる皆さんを見て爆笑してたりしました（こういうのを性格が悪いと言います）。</p>

<p>あとタイトルの元ネタの鮮度がちと古かった気がするなぁという感もあります。ソースコード上げたリポジトリのREADMEにも書きましたが、皆さん覚えているでしょうか。時は5ヶ月前、2014年6月。WWDC 2014で世にSwiftが発表され、The Swift Programming Languageが公開された後にTwitterを席巻した、あの衝撃の発言を。</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="ja"><p>Swiftの関数はHaskell風。これはいい。マシン語が透けて見える。CPUの歓声が聞こえてきそうだ <a href="http://t.co/tfWwKe5e03">pic.twitter.com/tfWwKe5e03</a></p>&mdash; Ryo Shimizu (@shi3z) <a href="https://twitter.com/shi3z/status/473627881055485952">2014, 6月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>（もちろんこの前後にも<strong>とても素晴らしい発言</strong>があるわけですが）</p>

<p>Swiftの関数はHaskell風、マシン語が透けて見える、CPUの歓声が聞こえてきそう——もう見るだけで頭がクラクラしてきそうな圧倒的で革新的で先進的で最も優れた表現力を持ったこのツイートに感銘を受け、今回の問題はSwiftで書かれているということで、このツイートをリスペクトして問題名にしました。このような素晴らしいツイートを世に送り出してくださったRyo Shimizu(@shi3z)氏にはこの場を借りて感謝の意を述べさせて頂きます。</p>

<p>しかしながら、個人的に「マシン語が透けて見える」というとこちらの方を推しておきます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>マシン語が透けて見える。CPUの歓声が聞こえてきそうだ <a href="http://t.co/drJMSTIdFQ">pic.twitter.com/drJMSTIdFQ</a></p>&mdash; 秋弦めい☂小傘ちゃんかわいい (@maytheplic) <a href="https://twitter.com/maytheplic/status/473701724574605313">2014, 6月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>最後に</h1>

<p><strong>小傘ちゃんかわいい。</strong></p>
]]></content>
  </entry>
  
</feed>
