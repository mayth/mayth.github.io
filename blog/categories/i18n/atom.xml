<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: i18n | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/i18n/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-10-17T18:27:31+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsAdminの日時選択が日本語でバグる]]></title>
    <link href="http://tech.aquarite.info/blog/2014/01/23/rails-admin-jp-problem/"/>
    <updated>2014-01-23T20:08:42+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/01/23/rails-admin-jp-problem</id>
    <content type="html"><![CDATA[<h1>概略</h1>

<p>Rails Adminでdatetime型（日時）のカラムを含むモデルを操作する際、ロケールが日本語で、かつ<a href="https://github.com/svenfuchs/rails-i18n">svenfuchs/rails-i18n</a>のファイルをそのまま使っていると例外<code>ArgumentError</code>(argument out of range)で死ぬ。</p>

<h1>原因</h1>

<p>そもそも内部で使ってる<code>Date._parse</code>（これはRubyの標準ライブラリである'time'に含まれる）が日本語形式（<code>y年m月d日</code>）での日付のパースに対応していない。</p>

<h1>対策</h1>

<p><strong>「日本語を使わなければいいんじゃないかな」</strong></p>

<p>Rails AdminではjQuery UIのdatepicker/timepickerを使っています。<code>input</code>要素の<code>data-options</code>属性にオプションをJSON形式で渡していて、このオプションの中に月名や曜日名、日付または時刻のフォーマットが含まれています。なのでこのオプションを変更して、フォーマットを<code>Date._parse</code>が対応している形式に変更すれば対策出来ます。このオプションは使用しているロケールに依存します（JavaScriptの実行時点ではなくてビューのテンプレートがレンダリングされた時点でオプションの中身が決定されて引き渡されます）。</p>

<p>が、もはや一体どこを弄ったらjQueryの(date|time)pickerに日本語が渡らないように出来るか調べる気力もなくなってしまったので、ロケール側を弄ることで対処しました。</p>

<p>具体的には<code>config/locales/ja.yml</code>の<code>date.formats</code>、および<code>time.formats</code>以下に存在する各種日付や時刻の形式を<code>Date._parse</code>がパース出来、日本語を含まないような形式に変更します。<code>%Y-%m-%d</code>とか<code>%Y-%m-%d %H:%M:%S</code>とか、数値と記号だけで表記するように変更すると幸せになれると思います。</p>

<p>これはロケール単位で変更出来るので、日本語のみ月名・曜日を含むような形式を避ければ問題ないと思います。英語のロケールの方では<code>%B %d, %Y</code>(&lsquo;January 23, 2014&rsquo;)とかが標準ですが、<code>Date._parse</code>はこの辺の形式には対応しているので問題ないです。</p>

<p>または、日本語ロケールの月名・曜日名の定義をそのまま英語に差し替えてしまうという手もあります。日本語ロケールにおいてもフォーマットは英語ロケールと統一したいという場合にはこの方がいいと思います。</p>

<p>欠点としては、影響がRails Adminに限らずアプリ全体に及んでしまう点が挙げられます。</p>

<p>試してはいませんが、他にはRails Adminのビューを弄れば出来そうな予感はします。要は<code>input</code>要素の<code>data-options</code>属性の中身を変更出来ればいいわけなので、ビューをカスタマイズして適切な形式のフォーマットを渡すとか、あるいは単純にJavaScriptで実行時に書き換えてやるとか、いろいろやりようはありそうです。が、そもそもビューのカスタマイズが面倒そうだったのでやってません。</p>

<h1>おまけ: 調査の経過</h1>

<p>エラーを吐いたときのスタックトレースを見ながら各メソッドに渡っている引数を見ると、引数に渡っている文字列が<code>2014年01Mon23Sun(Thu) 09:00</code>になっていたのでこの辺を調べた。</p>

<p>日本語ロケールで使用する場合、管理画面上のdatetime pickerを使うとコントローラへは<code>2014年01月23日(木) 09:00</code>といった形式で選択した日時が渡る。RailsAdminはこれを<code>RailsAdmin::Config::Fields::Types::Datetime.parse_input</code>メソッドを使ってパースしようとする。</p>

<p>ここでパースするとき、<code>normalize</code>メソッドを通す。<code>normalize</code>メソッドはパースしようとする文字列と、フォーマット文字列を渡す（フォーマット文字列については<a href="http://docs.ruby-lang.org/ja/2.1.0/class/Time.html#I_STRFTIME">Time.strftime</a>の説明を見るとよさげ）。日時に関しては、概略で示した日本語ロケールのファイルの場合、これは<code>%Y年%m月%d日(%a) %H:%M</code>である。<code>normalize</code>メソッドからさらにメソッド呼び出しを辿ると最終的に<code>Date._parse</code>メソッドに文字列を渡してパースすることがわかった。</p>

<p>DateTimeに対応する<code>normalize</code>メソッドは、英語ロケール以外が選択されており、かつ月名（とその省略形）、曜日名（とのその省略形）、午前/午後のフォーマット文字列が含まれるときに、パース対象の文字列に含まれる英語以外のロケールのそれらを、英語ロケールに置換する。フォーマット文字列でいえば<code>%[AaBbp]</code>のいずれかが含まれる場合に該当する。つまり<code>2014年01月23日(木) 09:00</code>と<code>%Y年%m月%d日(%a) %H:%M</code>が渡ったときに、<code>2014年01月23日(Thu) 09:00</code>を返すはずである。</p>

<p>前述のフォーマット文字列には<code>%a</code>（曜日）が含まれるのでこの置換が発生するが、このとき単純に全ての曜日の文字を置換してしまう。要は「月」→"Mon"、「火」→"Tue"、「水」→"Wed"、…という置換をパース対象文字列に行うわけだが、「月」と「日」が曜日以外に現れるせいでこれが巻き込まれて形式が狂う。その結果として最初に示した<code>2014年01Mon23Sun(Thu) 09:00</code>になってしまう。「01月」の「月」と「23日」の「日」が置換されてしまったわけだ。</p>

<p>で、ここで文字列が壊れてしまったのが原因なんじゃないかと思ったが、ふとそこでデバッガを使ってパース対象文字列を強引に元の正しい文字列に直しても同じエラーが発生する。別のコンソールでpryを立ち上げて同じ文字列を<code>Date._parse</code>に食わせたところ、同じ結果が返ってくる。今回の場合、月の値が20になってしまっている。こうして問題は前述の置換処理でもなんでもなく、そもそも冒頭に述べたように<code>Date._parse</code>が「2014年01月23日」というような日本語の形式に対応していないかららしい、ということになった。</p>
]]></content>
  </entry>
  
</feed>
