<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mono | Hello (forgotten) world]]></title>
  <link href="http://tech.aquarite.info/blog/categories/mono/atom.xml" rel="self"/>
  <link href="http://tech.aquarite.info/"/>
  <updated>2014-05-08T09:15:19+09:00</updated>
  <id>http://tech.aquarite.info/</id>
  <author>
    <name><![CDATA[Mei Akizuru]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Different Behaviors of DownloadString and Uri between .NET and Mono]]></title>
    <link href="http://tech.aquarite.info/blog/2014/05/08/different-behaviors-of-downloadstring-and-uri-between-net-and-mono/"/>
    <updated>2014-05-08T07:43:38+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/05/08/different-behaviors-of-downloadstring-and-uri-between-net-and-mono</id>
    <content type="html"><![CDATA[<p>Note: This is the summary of my posts (they are written in Japanese):</p>

<ul>
<li><a href="http://tech.aquarite.info/blog/2014/05/07/tkbctf3-miocat/">tkbctf3 Miocat</a></li>
<li><a href="http://tech.aquarite.info/blog/2014/05/07/uri-parsing-in-webclient/">MonoのWebClientにおけるURI</a></li>
<li><a href="http://tech.aquarite.info/blog/2014/05/08/download-string-in-mono-and-dotnet-framework/">結局Monoと.NETの挙動の違いはなんだったのか</a></li>
</ul>


<p>I already reported this as a bug for Xamarin&rsquo;s Bugzilla.</p>

<h1>Introduction</h1>

<p>I found the different behavior of <code>WebClient.DownloadString(String)</code> between Mono and .NET Framework when an invalid URI passed to it. In the Mono&rsquo;s implementation, it may cause a security issue.</p>

<p>This causes by two different behaviors, in <code>new Uri(String)</code>, and <code>Path.GetFullPath(String)</code>.</p>

<h1>DownloadString</h1>

<p><code>DownloadString(String)</code> and some methods (e.g. <code>DownloadFile(String)</code>, <code>OpenRead(String)</code>, etc.) calls <code>CreateUri(String)</code>, a private method of <code>WebClient</code>. (&ndash;> <a href="https://github.com/mono/mono/blob/master/mcs/class/System/System.Net/WebClient.cs#L798">source code on github</a>)</p>

<h2>CreateUri and GetUri</h2>

<p><code>CreateUri(String)</code> tries to make an instance of <code>Uri</code> with <code>new Uri(String)</code>. If an invalid URI passed, the constructor raises an exception. For example, <code>new Uri("http://../../../etc/passwd")</code> will be failed because its hostname part (<code>..</code>) is invalid. However, the failure will be ignored, and <code>CreateUri(String)</code> returns <code>new Uri(Path.GetFullPath(String))</code>. It means the local file address with the full path will be returned.</p>

<p>In .NET Framework, <code>DownloadString(String)</code> calls <code>GetUri(String)</code>, and it may have the same behavior as <code>CreateUri(String)</code>. (I didn&rsquo;t read its implementation, but I guess it from the stack trace when an exception is thrown.)</p>

<h1>Uri constructor</h1>

<p>In .NET, <code>new Uri(String)</code> fails when an invalid URI with a known scheme is given (e.g. <code>http://../../etc/passwd</code>), however, it <em>succeeds</em> when a invalid URI with <em>an unknown scheme</em> is given (e.g. <code>abc://../../etc/passwd</code>).</p>

<p>In Mono, <code>new Uri(String)</code> fails for both cases.</p>

<p>This is the first different behavior.</p>

<h1>Path.GetFullPath</h1>

<p>While <code>Path.GetFullPath</code> fails for URIs which has known schemes in .NET, it succeeds for any URIs in Mono.</p>

<p>For example, <code>http://../etc/passwd</code> is given, .NET&rsquo;s <code>Path.GetFullPath</code> fails with ArgumentException (&ldquo;URI formats are not supported.&rdquo;), but Mono&rsquo;s succeeds and returns the full path like <code>/home/mayth/etc/passwd</code>.</p>

<p>Another example: <code>abc://../etc/passwd</code> is given, .NET&rsquo;s <code>Path.GetFullPath</code> will succeeds, and Mono&rsquo;s also succeeds.</p>

<p>This result shows that .NET&rsquo;s implemantation may recognize the scheme of the given URI, and Mono&rsquo;s one may not.</p>

<p>This is the second different behavior.</p>

<h1>The Flow of DownloadString(String)</h1>

<h2>.NET</h2>

<h3>Invalid URIs with known scheme</h3>

<p>By default, &lsquo;known scheme&rsquo; means these schemes:</p>

<ul>
<li><a href="http://">http://</a></li>
<li><a href="https://">https://</a></li>
<li><a href="ftp://">ftp://</a></li>
<li>file://</li>
</ul>


<p>This is documented on MSDN (See: <a href="http://msdn.microsoft.com/en-us/library/bw00b1dc.aspx">WebRequest.Create Method (String)</a>).</p>

<p>parameter: addr = <code>http://../../etc/passwd</code></p>

<ol>
<li><code>GetUri(addr)</code> is called</li>
<li>Try to <code>new Uri(addr)</code>, and it fails</li>
<li>An exception is ignored, and <code>Path.GetFullPath(addr)</code> is called</li>
<li><code>Path.GetFullPath(addr)</code> throws ArgumentException with the message: &ldquo;URI formats are not supported.&rdquo;</li>
</ol>


<h3>Invalid URIs with unknown scheme</h3>

<p>parameter: addr = <code>abc://../../etc/passwd</code></p>

<ol>
<li><code>GetUri(addr)</code> is called</li>
<li>Try to <code>new Uri(addr)</code>, and it succeeds.</li>
<li><code>GetUri(addr)</code> returns the result of step2.</li>
<li><code>WebRequest.Create</code> is called.</li>
<li>It throws NotSupportedException because it does not know how to handle the given URI&rsquo;s scheme.</li>
</ol>


<h2>Mono</h2>

<p>In Mono, there is no difference whether the URI&rsquo;s scheme is known or not.</p>

<p>parameter: addr = <code>http://../../etc/passwd</code></p>

<ol>
<li><code>GetUri(addr)</code> is called</li>
<li>Try to <code>new Uri(addr)</code>, and it fails</li>
<li>An exception is ignored, and <code>Path.GetFullPath(addr)</code> is called</li>
<li><code>Path.GetFullPath(addr)</code> returns the full path (e.g. <code>/home/etc/passwd</code>)</li>
<li>The full path passed to <code>new Uri(String)</code>. This may result <code>file:///home/etc/passwd</code>.</li>
<li>Attempt to acquire the resource, <code>file:///home/etc/passwd</code>.</li>
</ol>


<h1>Security Issue</h1>

<p>Like the samples shown above, <code>DownloadString(String)</code> can access to the local resource, like <code>/etc/passwd</code>.</p>

<h2>Directory Traversal</h2>

<p>If the program runs at /home/mayth, for example, the code below will returns the content of <code>/etc/passwd</code>.</p>

<p><code>
WebClient.DownloadString("http://../../../etc/passwd")
</code></p>

<p>Of course, any files that is readable from the user who runs the program can be read. For example, the files in the home directory can be read.</p>

<p>The attackers can&rsquo;t know the listings of the directory, but they suggest it, or guess from <code>.bash_history</code> file.</p>

<h2>Full Path Disclosure</h2>

<p>If the program runs at <code>/home/mayth</code>, the code below will fail because it won&rsquo;t be found.</p>

<p><code>
WebClient.DownloadString("http://../../etc/passwd")
</code></p>

<p>In this case, an exception&rsquo;s message is: &lsquo;Could not find a part of the path &ldquo;/home/etc/passwd&rdquo;&rsquo;. If you output this message somewhere (stdout, log file, etc.), the attackers may be possible to see the full path.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[結局Monoと.NETの挙動の違いはなんだったのか]]></title>
    <link href="http://tech.aquarite.info/blog/2014/05/08/download-string-in-mono-and-dotnet-framework/"/>
    <updated>2014-05-08T06:49:41+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/05/08/download-string-in-mono-and-dotnet-framework</id>
    <content type="html"><![CDATA[<p>続・アレな文字を<code>WebClient.DownloadString(String)</code>に渡すとローカルのファイルが読める</p>

<p>ここ2つの記事でMonoの<code>WebClient.DownloadString(string)</code>にアレな文字列渡すとローカルファイルを落としてきてしまうという挙動について調べてたわけですが、よくよくスタックトレースを見てみると、.NET Frameworkでも<code>GetUri</code>というメソッドを経由して<code>Path.GetFullPath</code>が呼ばれていたことがわかりました。</p>

<p>そんなわけで<code>Path.GetFullPath</code>の挙動を見てみると、<code>http://../../../../etc/passwd</code>といったような文字列を与えたときに.NETとMonoで次のような挙動の違いが見られました。</p>

<ul>
<li>.NET Frameworkは「URIフォーマットはサポートしていない」というメッセージと共にArgumentExceptionが投げられる</li>
<li>Monoはそのままフルパスに変換する</li>
</ul>


<p>.NET上で同じことをしても<code>DownloadString(string)</code>がここまで問題にしてきた挙動をしなかったのは、ここで例外を吐いて止まっていたから、というだけのことだったわけです。</p>

<h1>スキーム</h1>

<p>ところでスキームをhttpじゃなくて適当な何かに変えたらどうなるんだろうと思って試してみました。</p>

<p>与える文字列を<code>abc://../../../../etc/passwd</code>といったように、実在しないような適当なスキームに変えて同じプログラムを動かしたところ、.NETではUriとしてのパースに成功しました。httpスキームのときは最初の部分をhostnameとして認識していたので、恐らくスキームを見てフォーマットを認識してるんでしょう。</p>

<p>さて、.NETにおいてはパースの結果<code>abc://../etc/passwd</code>になりました。なぜか<code>../</code>の部分がひとつにまとめられていましたがこれは一体どういう挙動なんでしょう。それはともかく、この結果を踏まえた上で同じ文字列を<code>WebClient.DownloadString(string)</code>に渡すと、今度は「そんなURIプリフィックスは知らん」とNotSupportedExceptionを投げられました。<code>WebRequest.Create</code>の中から呼ばれているようなので、前述の<code>GetUri</code>などは成功しているようです（というか、new Uriが成功するんだからそら成功するだろう）。で、<a href="http://msdn.microsoft.com/ja-jp/library/bw00b1dc%28v=vs.110%29.aspx">System.Net.WebRequest.Create(String)</a>を見ると、やはり渡されたURIのスキームに対応するものがない、という例外でよさそうです。どんなURIが渡されてもこれが呼ばれるとするなら、<code>http(s)://</code>、<code>ftp://</code>、<code>file://</code>のいずれにも該当しないURIは常に弾かれることになります。</p>

<p>Monoの場合、まず<code>new Uri(String)</code>が<code>UriFormatException</code>で失敗します。ということは前の記事で述べた通り<code>Path.GetFullPath</code>が呼ばれることになり、やはりこの場合でもローカルのファイルが読めてしまいます。</p>

<h1>まとめ</h1>

<p>結局何がこの挙動の違いを生み出していたのかというと以下の2点だと考えられます。</p>

<ul>
<li>Monoの<code>new Uri(String)</code>が未知のスキームを持つURIに対して失敗する（.NETは成功する）</li>
<li>Monoの<code>Path.GetFullPath(String)</code>がURIであるような文字列に対して成功する（.NETは失敗する）</li>
</ul>


<p>とりあえずバグレポートも書いたのでこの件は一段落ということでいいんじゃないんでしょうか……（遠い目）</p>

<p>（バグレポート、type=&ldquo;text"なフィールドでEnter叩いちゃって途中送信されて慌てて削除する方法を探してみるも見当も付かず、結局コメントで「途中送信しちゃった許してくださいお願いします何でもしますから」って言いながらレポート書き直したのは内緒だぞっ）</p>

<p>あと、整理のために<code>DownloadString(String)</code>の処理の流れを書いておきます。</p>

<h2>.NET</h2>

<h3>既知のスキームを持つ不正なURI</h3>

<p>given: <code>http://../../etc/passwd</code></p>

<ol>
<li><code>GetUri</code>が呼ばれる</li>
<li>たぶん内部的に<code>new Uri(String)</code>して失敗する</li>
<li>たぶんその結果<code>Path.GetFullPath(String)</code>が呼ばれる</li>
<li><code>Path.GetFullPath(String)</code>がArgumentExceptionを投げる (&ldquo;URI formats are not supported.&rdquo;)</li>
</ol>


<h3>未知のスキームを持つ不正なURI</h3>

<p>given: <code>abc://../../etc/passwd</code></p>

<ol>
<li><code>GetUri</code>が呼ばれる</li>
<li>たぶん内部的に<code>new Uri(String)</code>して成功する</li>
<li>成功したのでその結果をそのまま返す</li>
<li><code>WebRequest.Create</code>が呼ばれる</li>
<li><code>WebRequest.Create</code>が未知のスキームに対応できずNotSupportedExceptionを投げる</li>
</ol>


<h2>Mono</h2>

<h3>既知のスキームを持つ不正なURI</h3>

<p>given: <code>http://../../etc/passwd</code></p>

<ol>
<li><code>CreateUri</code>が呼ばれる</li>
<li><code>new Uri(String)</code>して失敗する</li>
<li><code>Path.GetFullPath(String)</code>が呼ばれる</li>
<li><code>Path.GetFullPath(String)</code>が成功し、結果を返す (e.g. <code>/home/etc/passwd</code>)</li>
<li>その結果を<code>new Uri(String)</code>に渡す (結果<code>file:///home/etc/passwd</code>なUriが返る)</li>
<li>それを取得する (この場合は（たぶん）そのファイルがないので例外を吐く）</li>
</ol>


<h3>未知のスキームを持つ不正なURI</h3>

<p>given: <code>abc://../../etc/passwd</code></p>

<ol>
<li><code>CreateUri</code>が呼ばれる</li>
<li><code>new Uri(String)</code>して失敗する</li>
<li><code>Path.GetFullPath(String)</code>が呼ばれる</li>
<li><code>Path.GetFullPath(String)</code>が成功し、結果を返す (e.g. <code>/home/etc/passwd</code>)</li>
<li>その結果を<code>new Uri(String)</code>に渡す (結果<code>file:///home/etc/passwd</code>なUriが返る)</li>
<li>それを取得する (この場合は（たぶん）そのファイルがないので例外を吐く）</li>
</ol>


<p>※.NETとの対比で両方書いたが、Monoの場合いずれも処理の流れは全く同じ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoのWebClientにおけるURI]]></title>
    <link href="http://tech.aquarite.info/blog/2014/05/07/uri-parsing-in-webclient/"/>
    <updated>2014-05-07T13:33:03+09:00</updated>
    <id>http://tech.aquarite.info/blog/2014/05/07/uri-parsing-in-webclient</id>
    <content type="html"><![CDATA[<h1>発端</h1>

<p>発端は<a href="/blog/2014/05/07/tkbctf3-miocat/">前の記事</a>にあるように、tkbctf3の問題としてmiocatなるものを出してみたのはいいものの、意図とは異なる脆弱性を作り込んで250点問題が超絶ボーナス問題になりましたよ、というお話しです。</p>

<h1>調査</h1>

<p>miocatはC#で書かれており、実際の運用ではMonoランタイムで動いていました。というわけでMonoのソースコードを読めば解決です。やったね。</p>

<p>そういうわけでまずは<code>WebClient</code>の実装を読んでみたのですが、怪しい箇所が一発で見つかりました。<a href="https://github.com/mono/mono/blob/2d573ae1ceac1656f0293cca3736dcb10c28be38/mcs/class/System/System.Net/WebClient.cs#L798">WebClient.cs#798</a>、privateメソッドである<code>CreateUri(string)</code>なるメソッドです。<code>DownloadString(string)</code>は、その引数をこのメソッドに渡して<code>DownloadData(Uri)</code>を呼び出します。</p>

<p><code>try-catch</code>の中で渡されたアドレス（と、<code>baseAddress</code>）を元に<code>Uri</code>のインスタンスを作って<code>CreateUri(Uri)</code>に渡していますが、ここで例外が発生すると<code>return new Uri(Path.GetFullPath(address))</code>という恐怖のコードが走ります。</p>

<p>まず例外を発生させる方法ですが、これは簡単でURIとして不正なものを渡してあげればおしまいです。例えば<code>abc://;/etc/passwd</code>はhostname部がパース不能なので例外を吐きます。</p>

<p><code>System.IO.Path.GetFullPath(string)</code>というのは名前からお察しの通り、与えられたパスをカレントディレクトリからの相対パスと見なして絶対パスに変換します。ここで、例えばカレントディレクトリが<code>/home/kogasa</code>、引数が<code>http://etc/passwd</code>だとすると、結果は<code>/home/kogasa/http://etc/passwd</code>になります。要するに<code>http:</code>というディレクトリの下に<code>etc</code>ディレクトリがあって云々、という形になります。つまるところ連続する<code>/</code>はひとつにまとめられてしまうわけです。先ほどの例外を吐く例でいけば、<code>/home/kogasa/abc://;/etc/passwd</code>になります。</p>

<p>ところでWindowsだとパスに<code>:</code>が入ってると厄介なことになりそうというか、<a href="http://msdn.microsoft.com/ja-jp/library/system.io.path.getfullpath%28v=vs.110%29.aspx">MSDN的には</a><code>NotSupportedException</code>が投げられるべきところだと思うのですが、コレ大丈夫なんでしょうか。ぱっと見ただけだとそれらしいコード見当たらなかったんですが……。</p>

<p>※Windowsで<code>GetFullPath</code>に<code>http://etc/passwd</code>を与えてみたら、<code>ArgumentException</code>で「URLフォーマットには対応していません」みたいなことを言われました。で、<code>abc://;/etc/passwd</code>を与えると<code>NotSupportedException</code>で「指定されたパスのフォーマットはサポートされていません」と言われました。ちゃんとスキーム見てるんですね。</p>

<p>それはそれとして、そんな感じでフルパスを<code>Uri</code>のコンストラクタに与えると、<code>file:</code>スキームのURLになって返ってきます。こうなるとただのローカルに対するディレクトリ操作なので、例えば<code>abc://;/../etc/passwd</code>にするとフルパスは<code>/home/kogasa/abc:/etc/passwd</code>になりますし、もういっこ<code>../</code>を足せば<code>/home/kogasa/etc/passwd</code>——といった感じで<code>../</code>をつけていけば無事に<code>/etc/passwd</code>に辿り着けますね、やったね、ということでした。</p>

<p>Monoの実装自体がヤバいのか、それともWindows以外で動かした結果ああなったのかまでは知りませんが、ひとまずそんな感じになりました。Windowsで動かしてたらあの解法は通らなかったのかなぁとかぼんやり思いながらそもそももっとマシな実装しておけばよかったと反省しきり。</p>

<p>それにしても繰り返しになりますが結構このURLとしてのパース失敗時の回復の仕方がヤバい気がするんですが、これは意図的に.NET Frameworkと異なる実装にしているのか特に理由はないけどこうなってるのか、はてさて。</p>

<h1>まとめ</h1>

<p><strong>もっと恐ろしいMonoの片鱗を味わったぜ…</strong></p>
]]></content>
  </entry>
  
</feed>
